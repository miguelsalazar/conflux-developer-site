(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{155:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var c=n(2),a=n(9),r=(n(0),n(210)),o={id:"go_sdk",title:"Golang SDK",custom_edit_url:"https://github.com/Conflux-Chain/go-conflux-sdk/edit/master/api.md",keywords:["conflux","go","sdk"]},s={id:"go-conflux-sdk/go_sdk",title:"Golang SDK",description:"API Reference",source:"@site/docs/go-conflux-sdk/api.md",permalink:"/docs/go-conflux-sdk/go_sdk",editUrl:"https://github.com/Conflux-Chain/go-conflux-sdk/edit/master/api.md",lastUpdatedAt:1609832384,sidebar:"docs",previous:{title:"Javascript SDK",permalink:"/docs/js-conflux-sdk/docs/javascript_sdk"},next:{title:"What Is ConfluxPortal",permalink:"/docs/conflux-portal/docs/en/portal/introduction"}},l=[{value:"Getting Started",id:"getting-started",children:[]},{value:"Installation",id:"installation",children:[]},{value:"package sdk",id:"package-sdk",children:[{value:"type AccountManager",id:"type-accountmanager",children:[]},{value:"type Client",id:"type-client",children:[]},{value:"type Contract",id:"type-contract",children:[]},{value:"type ContractDeployResult",id:"type-contractdeployresult",children:[]}]},{value:"package utils",id:"package-utils",children:[]},{value:"package internalcontract",id:"package-internalcontract",children:[{value:"type AdminControl",id:"type-admincontrol",children:[]},{value:"type Sponsor",id:"type-sponsor",children:[]},{value:"type Staking",id:"type-staking",children:[]}]}],i={rightToc:l};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(c.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"api-reference"},"API Reference"),Object(r.b)("h2",{id:"getting-started"},"Getting Started"),Object(r.b)("p",null,"The go-conflux-sdk module is a collection of packages which contain specific functionality for the conflux ecosystem."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The package ",Object(r.b)("inlineCode",{parentName:"li"},"sdk")," is for interacting with conflux chain, account manager and operating smart contracts"),Object(r.b)("li",{parentName:"ul"},"The package ",Object(r.b)("inlineCode",{parentName:"li"},"utils")," contains useful helper functions for Dapp developers.")),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("p",null,"You can get Conflux Golang API directly or use go module as below"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{}),"go get github.com/Conflux-Chain/go-conflux-sdk\n")),Object(r.b)("p",null,"You can also add the Conflux Golang API into vendor folder."),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{}),"govendor fetch github.com/Conflux-Chain/go-conflux-sdk\n")),Object(r.b)("p",null,"After that you need to create a client instance with node url and an account manager instance."),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),'url:= "http://testnet-jsonrpc.conflux-chain.org:12537"\nclient, err := sdk.NewClient(url)\nif err != nil {\n    fmt.Println("new client error:", err)\n    return\n}\nam := sdk.NewAccountManager("./keystore")\nclient.SetAccountManager(am)\n')),Object(r.b)("h2",{id:"package-sdk"},"package sdk"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{}),'import "github.com/Conflux-Chain/go-conflux-sdk"\n')),Object(r.b)("h3",{id:"type-accountmanager"},"type AccountManager"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"type AccountManager struct {\n}\n")),Object(r.b)("p",null,"AccountManager manages Conflux accounts."),Object(r.b)("h4",{id:"func--newaccountmanager"},"func  NewAccountManager"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func NewAccountManager(keydir string) *AccountManager\n")),Object(r.b)("p",null,'NewAccountManager creates an instance of AccountManager based on the keystore\ndirectory "keydir".'),Object(r.b)("h4",{id:"func-accountmanager-create"},"func (*AccountManager) Create"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) Create(passphrase string) (types.Address, error)\n")),Object(r.b)("p",null,"Create creates a new account and puts the keystore file into keystore directory"),Object(r.b)("h4",{id:"func-accountmanager-createethcompatible"},"func (*AccountManager) CreateEthCompatible"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) CreateEthCompatible(passphrase string) (types.Address, error)\n")),Object(r.b)("p",null,"CreateEthCompatible creates a new account compatible with eth and puts the\nkeystore file into keystore directory"),Object(r.b)("h4",{id:"func-accountmanager-delete"},"func (*AccountManager) Delete"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) Delete(address types.Address, passphrase string) error\n")),Object(r.b)("p",null,"Delete deletes the specified account and remove the keystore file from keystore\ndirectory."),Object(r.b)("h4",{id:"func-accountmanager-export"},"func (*AccountManager) Export"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) Export(address types.Address, passphrase string) (string, error)\n")),Object(r.b)("p",null,"Export exports private key string of address"),Object(r.b)("h4",{id:"func-accountmanager-getdefault"},"func (*AccountManager) GetDefault"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) GetDefault() (*types.Address, error)\n")),Object(r.b)("p",null,"GetDefault return first account in keystore directory"),Object(r.b)("h4",{id:"func-accountmanager-import"},"func (*AccountManager) Import"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) Import(keyFile, passphrase, newPassphrase string) (types.Address, error)\n")),Object(r.b)("p",null,"Import imports account from external key file to keystore directory. Returns\nerror if the account already exists."),Object(r.b)("h4",{id:"func-accountmanager-importkey"},"func (*AccountManager) ImportKey"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) ImportKey(keyString string, passphrase string) (types.Address, error)\n")),Object(r.b)("p",null,"ImportKey import account from private key hex string and save to keystore\ndirectory"),Object(r.b)("h4",{id:"func-accountmanager-list"},"func (*AccountManager) List"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) List() []types.Address\n")),Object(r.b)("p",null,"List lists all accounts in keystore directory."),Object(r.b)("h4",{id:"func-accountmanager-lock"},"func (*AccountManager) Lock"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) Lock(address types.Address) error\n")),Object(r.b)("p",null,"Lock locks the specified account."),Object(r.b)("h4",{id:"func-accountmanager-sign"},"func (*AccountManager) Sign"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) Sign(tx types.UnsignedTransaction, passphrase string) (v byte, r, s []byte, err error)\n")),Object(r.b)("p",null,"Sign signs tx by passphrase and returns the signature"),Object(r.b)("h4",{id:"func-accountmanager-signandecodetransactionwithpassphrase"},"func (*AccountManager) SignAndEcodeTransactionWithPassphrase"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) SignAndEcodeTransactionWithPassphrase(tx types.UnsignedTransaction, passphrase string) ([]byte, error)\n")),Object(r.b)("p",null,"SignAndEcodeTransactionWithPassphrase signs tx with given passphrase and return\nits RLP encoded data."),Object(r.b)("h4",{id:"func-accountmanager-signtransaction"},"func (*AccountManager) SignTransaction"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) SignTransaction(tx types.UnsignedTransaction) ([]byte, error)\n")),Object(r.b)("p",null,"SignTransaction signs tx and returns its RLP encoded data."),Object(r.b)("h4",{id:"func-accountmanager-signtransactionwithpassphrase"},"func (*AccountManager) SignTransactionWithPassphrase"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) SignTransactionWithPassphrase(tx types.UnsignedTransaction, passphrase string) (*types.SignedTransaction, error)\n")),Object(r.b)("p",null,"SignTransactionWithPassphrase signs tx with given passphrase and returns a\ntransction with signature"),Object(r.b)("h4",{id:"func-accountmanager-timedunlock"},"func (*AccountManager) TimedUnlock"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) TimedUnlock(address types.Address, passphrase string, timeout time.Duration) error\n")),Object(r.b)("p",null,"TimedUnlock unlocks the specified account for a period of time."),Object(r.b)("h4",{id:"func-accountmanager-timedunlockdefault"},"func (*AccountManager) TimedUnlockDefault"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) TimedUnlockDefault(passphrase string, timeout time.Duration) error\n")),Object(r.b)("p",null,"TimedUnlockDefault unlocks the specified account for a period of time."),Object(r.b)("h4",{id:"func-accountmanager-unlock"},"func (*AccountManager) Unlock"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) Unlock(address types.Address, passphrase string) error\n")),Object(r.b)("p",null,"Unlock unlocks the specified account indefinitely."),Object(r.b)("h4",{id:"func-accountmanager-unlockdefault"},"func (*AccountManager) UnlockDefault"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) UnlockDefault(passphrase string) error\n")),Object(r.b)("p",null,"UnlockDefault unlocks the default account indefinitely."),Object(r.b)("h4",{id:"func-accountmanager-update"},"func (*AccountManager) Update"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (m *AccountManager) Update(address types.Address, passphrase, newPassphrase string) error\n")),Object(r.b)("p",null,"Update updates the passphrase of specified account."),Object(r.b)("h3",{id:"type-client"},"type Client"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"type Client struct {\n}\n")),Object(r.b)("p",null,"Client represents a client to interact with Conflux blockchain."),Object(r.b)("h4",{id:"func--newclient"},"func  NewClient"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func NewClient(nodeURL string) (*Client, error)\n")),Object(r.b)("p",null,"NewClient creates a new instance of Client with specified conflux node url."),Object(r.b)("h4",{id:"func--newclientwithrpcrequester"},"func  NewClientWithRPCRequester"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func NewClientWithRPCRequester(rpcRequester rpcRequester) (*Client, error)\n")),Object(r.b)("p",null,"NewClientWithRPCRequester creates client with specified rpcRequester"),Object(r.b)("h4",{id:"func--newclientwithretry"},"func  NewClientWithRetry"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func NewClientWithRetry(nodeURL string, retryCount int, retryInterval time.Duration) (*Client, error)\n")),Object(r.b)("p",null,"NewClientWithRetry creates a retryable new instance of Client with specified\nconflux node url and retry options."),Object(r.b)("p",null,"the retryInterval will be set to 1 second if pass 0"),Object(r.b)("h4",{id:"func-client-applyunsignedtransactiondefault"},"func (*Client) ApplyUnsignedTransactionDefault"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) ApplyUnsignedTransactionDefault(tx *types.UnsignedTransaction) error\n")),Object(r.b)("p",null,"ApplyUnsignedTransactionDefault set empty fields to value fetched from conflux\nnode."),Object(r.b)("h4",{id:"func-client-batchcallrpc"},"func (*Client) BatchCallRPC"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) BatchCallRPC(b []rpc.BatchElem) error\n")),Object(r.b)("p",null,"BatchCallRPC sends all given requests as a single batch and waits for the server\nto return a response for all of them."),Object(r.b)("p",null,"In contrast to Call, BatchCall only returns I/O errors. Any error specific to a\nrequest is reported through the Error field of the corresponding BatchElem."),Object(r.b)("p",null,"Note that batch calls may not be executed atomically on the server side."),Object(r.b)("h4",{id:"func-client-batchgetblockconfirmationrisk"},"func (*Client) BatchGetBlockConfirmationRisk"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) BatchGetBlockConfirmationRisk(blockhashes []types.Hash) (map[types.Hash]*big.Float, error)\n")),Object(r.b)("p",null,"BatchGetBlockConfirmationRisk acquires confirmation risk informations in bulk by\nblockhashes"),Object(r.b)("h4",{id:"func-client-batchgetblocksummarys"},"func (*Client) BatchGetBlockSummarys"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) BatchGetBlockSummarys(blockhashes []types.Hash) (map[types.Hash]*types.BlockSummary, error)\n")),Object(r.b)("p",null,"BatchGetBlockSummarys requests block summary informations in bulk by blockhashes"),Object(r.b)("h4",{id:"func-client-batchgetrawblockconfirmationrisk"},"func (*Client) BatchGetRawBlockConfirmationRisk"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) BatchGetRawBlockConfirmationRisk(blockhashes []types.Hash) (map[types.Hash]*big.Int, error)\n")),Object(r.b)("p",null,"BatchGetRawBlockConfirmationRisk requests raw confirmation risk informations in\nbulk by blockhashes"),Object(r.b)("h4",{id:"func-client-batchgettxbyhashes"},"func (*Client) BatchGetTxByHashes"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) BatchGetTxByHashes(txhashes []types.Hash) (map[types.Hash]*types.Transaction, error)\n")),Object(r.b)("p",null,"BatchGetTxByHashes requests transaction informations in bulk by txhashes"),Object(r.b)("h4",{id:"func-client-call"},"func (*Client) Call"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) Call(request types.CallRequest, epoch *types.Epoch) (*string, error)\n")),Object(r.b)("p",null,'Call executes a message call transaction "request" at specified epoch, which is\ndirectly executed in the VM of the node, but never mined into the block chain\nand returns the contract execution result.'),Object(r.b)("h4",{id:"func-client-callrpc"},"func (*Client) CallRPC"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) CallRPC(result interface{}, method string, args ...interface{}) error\n")),Object(r.b)("p",null,"CallRPC performs a JSON-RPC call with the given arguments and unmarshals into\nresult if no error occurred."),Object(r.b)("p",null,"The result must be a pointer so that package json can unmarshal into it. You can\nalso pass nil, in which case the result is ignored."),Object(r.b)("h4",{id:"func-client-checkbalanceagainsttransaction"},"func (*Client) CheckBalanceAgainstTransaction"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) CheckBalanceAgainstTransaction(accountAddress types.Address,\n    contractAddress types.Address,\n    gasLimit *hexutil.Big,\n    gasPrice *hexutil.Big,\n    storageLimit *hexutil.Big,\n    epoch ...*types.Epoch) (response types.CheckBalanceAgainstTransactionResponse, err error)\n")),Object(r.b)("p",null,"CheckBalanceAgainstTransaction checks if user balance is enough for the\ntransaction."),Object(r.b)("h4",{id:"func-client-close"},"func (*Client) Close"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) Close()\n")),Object(r.b)("p",null,"Close closes the client, aborting any in-flight requests."),Object(r.b)("h4",{id:"func-client-createunsignedtransaction"},"func (*Client) CreateUnsignedTransaction"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) CreateUnsignedTransaction(from types.Address, to types.Address, amount *hexutil.Big, data []byte) (*types.UnsignedTransaction, error)\n")),Object(r.b)("p",null,"CreateUnsignedTransaction creates an unsigned transaction by parameters, and the\nother fields will be set to values fetched from conflux node."),Object(r.b)("h4",{id:"func-client-debug"},"func (*Client) Debug"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) Debug(method string, args ...interface{}) (interface{}, error)\n")),Object(r.b)("p",null,"Debug calls the Conflux debug API."),Object(r.b)("h4",{id:"func-client-deploycontract"},"func (*Client) DeployContract"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) DeployContract(option *types.ContractDeployOption, abiJSON []byte,\n    bytecode []byte, constroctorParams ...interface{}) *ContractDeployResult\n")),Object(r.b)("p",null,"DeployContract deploys a contract by abiJSON, bytecode and consturctor params.\nIt returns a ContractDeployState instance which contains 3 channels for\nnotifying when state changed."),Object(r.b)("h4",{id:"func-client-estimategasandcollateral"},"func (*Client) EstimateGasAndCollateral"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) EstimateGasAndCollateral(request types.CallRequest) (*types.Estimate, error)\n")),Object(r.b)("p",null,'EstimateGasAndCollateral excutes a message call "request" and returns the amount\nof the gas used and storage for collateral'),Object(r.b)("h4",{id:"func-client-getaccountinfo"},"func (*Client) GetAccountInfo"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetAccountInfo(account types.Address, epoch ...*types.Epoch) (accountInfo types.AccountInfo, err error)\n")),Object(r.b)("p",null,"GetAccountInfo returns account related states of the given account"),Object(r.b)("h4",{id:"func-client-getaccumulateinterestrate"},"func (*Client) GetAccumulateInterestRate"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetAccumulateInterestRate(epoch ...*types.Epoch) (intersetRate *hexutil.Big, err error)\n")),Object(r.b)("p",null,"GetAccumulateInterestRate returns accumulate interest rate of the given epoch"),Object(r.b)("h4",{id:"func-client-getadmin"},"func (*Client) GetAdmin"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetAdmin(contractAddress types.Address, epoch ...*types.Epoch) (admin types.Address, err error)\n")),Object(r.b)("p",null,"GetAdmin returns admin of the given contract"),Object(r.b)("h4",{id:"func-client-getbalance"},"func (*Client) GetBalance"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetBalance(address types.Address, epoch ...*types.Epoch) (*big.Int, error)\n")),Object(r.b)("p",null,"GetBalance returns the balance of specified address at epoch."),Object(r.b)("h4",{id:"func-client-getbestblockhash"},"func (*Client) GetBestBlockHash"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetBestBlockHash() (types.Hash, error)\n")),Object(r.b)("p",null,"GetBestBlockHash returns the current best block hash."),Object(r.b)("h4",{id:"func-client-getblockbyepoch"},"func (*Client) GetBlockByEpoch"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetBlockByEpoch(epoch *types.Epoch) (*types.Block, error)\n")),Object(r.b)("p",null,"GetBlockByEpoch returns the block of specified epoch. If the epoch is invalid,\nreturn the concrete error."),Object(r.b)("h4",{id:"func-client-getblockbyhash"},"func (*Client) GetBlockByHash"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetBlockByHash(blockHash types.Hash) (*types.Block, error)\n")),Object(r.b)("p",null,"GetBlockByHash returns the block of specified blockHash If the block is not\nfound, return nil."),Object(r.b)("h4",{id:"func-client-getblockbyhashwithpivotassumption"},"func (*Client) GetBlockByHashWithPivotAssumption"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetBlockByHashWithPivotAssumption(blockHash types.Hash, pivotHash types.Hash, epoch hexutil.Uint64) (block types.Block, err error)\n")),Object(r.b)("p",null,"GetBlockByHashWithPivotAssumption returns block with given hash and pivot chain\nassumption."),Object(r.b)("h4",{id:"func-client-getblockconfirmationrisk"},"func (*Client) GetBlockConfirmationRisk"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetBlockConfirmationRisk(blockHash types.Hash) (*big.Float, error)\n")),Object(r.b)("p",null,"GetBlockConfirmationRisk indicates the probability that the pivot block of the\nepoch where the block is located becomes a normal block."),Object(r.b)("p",null,"it's (raw confirmation risk coefficient/ (2^256-1))"),Object(r.b)("h4",{id:"func-client-getblockrewardinfo"},"func (*Client) GetBlockRewardInfo"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetBlockRewardInfo(epoch ...*types.Epoch) (rewardInfo []types.RewardInfo, err error)\n")),Object(r.b)("p",null,"GetBlockRewardInfo returns block reward information in an epoch"),Object(r.b)("h4",{id:"func-client-getblocksummarybyepoch"},"func (*Client) GetBlockSummaryByEpoch"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetBlockSummaryByEpoch(epoch *types.Epoch) (*types.BlockSummary, error)\n")),Object(r.b)("p",null,"GetBlockSummaryByEpoch returns the block summary of specified epoch. If the\nepoch is invalid, return the concrete error."),Object(r.b)("h4",{id:"func-client-getblocksummarybyhash"},"func (*Client) GetBlockSummaryByHash"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetBlockSummaryByHash(blockHash types.Hash) (*types.BlockSummary, error)\n")),Object(r.b)("p",null,"GetBlockSummaryByHash returns the block summary of specified blockHash If the\nblock is not found, return nil."),Object(r.b)("h4",{id:"func-client-getblocktrace"},"func (*Client) GetBlockTrace"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetBlockTrace(blockHash types.Hash) (trace types.LocalizedBlockTrace, err error)\n")),Object(r.b)("p",null,"GetBlockTrace returns all traces produced at given block."),Object(r.b)("h4",{id:"func-client-getblocksbyepoch"},"func (*Client) GetBlocksByEpoch"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetBlocksByEpoch(epoch *types.Epoch) ([]types.Hash, error)\n")),Object(r.b)("p",null,"GetBlocksByEpoch returns the blocks hash in the specified epoch."),Object(r.b)("h4",{id:"func-client-getclientversion"},"func (*Client) GetClientVersion"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetClientVersion() (clientVersion string, err error)\n")),Object(r.b)("p",null,"GetClientVersion returns the client version as a string"),Object(r.b)("h4",{id:"func-client-getcode"},"func (*Client) GetCode"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetCode(address types.Address, epoch ...*types.Epoch) (string, error)\n")),Object(r.b)("p",null,"GetCode returns the bytecode in HEX format of specified address at epoch."),Object(r.b)("h4",{id:"func-client-getcollateralforstorage"},"func (*Client) GetCollateralForStorage"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetCollateralForStorage(account types.Address, epoch ...*types.Epoch) (storage *hexutil.Big, err error)\n")),Object(r.b)("p",null,"GetCollateralForStorage returns balance of the given account."),Object(r.b)("h4",{id:"func-client-getcontract"},"func (*Client) GetContract"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetContract(abiJSON []byte, deployedAt *types.Address) (*Contract, error)\n")),Object(r.b)("p",null,"GetContract creates a contract instance according to abi json and it's deployed\naddress"),Object(r.b)("h4",{id:"func-client-getdepositlist"},"func (*Client) GetDepositList"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetDepositList(address types.Address, epoch ...*types.Epoch) (depositInfos []types.DepositInfo, err error)\n")),Object(r.b)("p",null,"GetDepositList returns deposit list of the given account."),Object(r.b)("h4",{id:"func-client-getepochnumber"},"func (*Client) GetEpochNumber"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetEpochNumber(epoch ...*types.Epoch) (*big.Int, error)\n")),Object(r.b)("p",null,"GetEpochNumber returns the highest or specified epoch number."),Object(r.b)("h4",{id:"func-client-getgasprice"},"func (*Client) GetGasPrice"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetGasPrice() (*big.Int, error)\n")),Object(r.b)("p",null,"GetGasPrice returns the recent mean gas price."),Object(r.b)("h4",{id:"func-client-getinterestrate"},"func (*Client) GetInterestRate"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetInterestRate(epoch ...*types.Epoch) (intersetRate *hexutil.Big, err error)\n")),Object(r.b)("p",null,"GetInterestRate returns interest rate of the given epoch"),Object(r.b)("h4",{id:"func-client-getlogs"},"func (*Client) GetLogs"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetLogs(filter types.LogFilter) ([]types.Log, error)\n")),Object(r.b)("p",null,"GetLogs returns logs that matching the specified filter."),Object(r.b)("h4",{id:"func-client-getnextnonce"},"func (*Client) GetNextNonce"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetNextNonce(address types.Address, epoch ...*types.Epoch) (*big.Int, error)\n")),Object(r.b)("p",null,"GetNextNonce returns the next transaction nonce of address"),Object(r.b)("h4",{id:"func-client-getnodeurl"},"func (*Client) GetNodeURL"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetNodeURL() string\n")),Object(r.b)("p",null,"GetNodeURL returns node url"),Object(r.b)("h4",{id:"func-client-getrawblockconfirmationrisk"},"func (*Client) GetRawBlockConfirmationRisk"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetRawBlockConfirmationRisk(blockhash types.Hash) (*big.Int, error)\n")),Object(r.b)("p",null,"GetRawBlockConfirmationRisk indicates the risk coefficient that the pivot block\nof the epoch where the block is located becomes a normal block."),Object(r.b)("h4",{id:"func-client-getskippedblocksbyepoch"},"func (*Client) GetSkippedBlocksByEpoch"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetSkippedBlocksByEpoch(epoch *types.Epoch) (blockHashs []types.Hash, err error)\n")),Object(r.b)("p",null,"GetSkippedBlocksByEpoch returns skipped block hashes of given epoch"),Object(r.b)("h4",{id:"func-client-getsponsorinfo"},"func (*Client) GetSponsorInfo"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetSponsorInfo(contractAddress types.Address, epoch ...*types.Epoch) (sponsor types.SponsorInfo, err error)\n")),Object(r.b)("p",null,"GetSponsorInfo returns sponsor information of the given contract"),Object(r.b)("h4",{id:"func-client-getstakingbalance"},"func (*Client) GetStakingBalance"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetStakingBalance(account types.Address, epoch ...*types.Epoch) (balance *hexutil.Big, err error)\n")),Object(r.b)("p",null,"GetStakingBalance returns balance of the given account."),Object(r.b)("h4",{id:"func-client-getstatus"},"func (*Client) GetStatus"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetStatus() (*types.Status, error)\n")),Object(r.b)("p",null,"GetStatus returns chainID of connecting conflux node"),Object(r.b)("h4",{id:"func-client-getstorageat"},"func (*Client) GetStorageAt"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetStorageAt(address types.Address, position types.Hash, epoch ...*types.Epoch) (storageEntries *hexutil.Big, err error)\n")),Object(r.b)("p",null,"GetStorageAt returns storage entries from a given contract."),Object(r.b)("h4",{id:"func-client-getstorageroot"},"func (*Client) GetStorageRoot"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetStorageRoot(address types.Address, epoch ...*types.Epoch) (storageRoot types.StorageRoot, err error)\n")),Object(r.b)("p",null,"GetStorageRoot returns storage root of given address"),Object(r.b)("h4",{id:"func-client-getsupplyinfo"},"func (*Client) GetSupplyInfo"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetSupplyInfo(epoch ...*types.Epoch) (info types.TokenSupplyInfo, err error)\n")),Object(r.b)("p",null,"GetSupplyInfo Return information about total token supply."),Object(r.b)("h4",{id:"func-client-gettransactionbyhash"},"func (*Client) GetTransactionByHash"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetTransactionByHash(txHash types.Hash) (*types.Transaction, error)\n")),Object(r.b)("p",null,"GetTransactionByHash returns transaction for the specified txHash. If the\ntransaction is not found, return nil."),Object(r.b)("h4",{id:"func-client-gettransactionreceipt"},"func (*Client) GetTransactionReceipt"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetTransactionReceipt(txHash types.Hash) (*types.TransactionReceipt, error)\n")),Object(r.b)("p",null,"GetTransactionReceipt returns the receipt of specified transaction hash. If no\nreceipt is found, return nil."),Object(r.b)("h4",{id:"func-client-getvotelist"},"func (*Client) GetVoteList"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) GetVoteList(address types.Address, epoch ...*types.Epoch) (voteStakeInfos []types.VoteStakeInfo, err error)\n")),Object(r.b)("p",null,"GetVoteList returns vote list of the given account."),Object(r.b)("h4",{id:"func-client-sendrawtransaction"},"func (*Client) SendRawTransaction"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) SendRawTransaction(rawData []byte) (types.Hash, error)\n")),Object(r.b)("p",null,"SendRawTransaction sends signed transaction and returns its hash."),Object(r.b)("h4",{id:"func-client-sendtransaction"},"func (*Client) SendTransaction"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) SendTransaction(tx *types.UnsignedTransaction) (types.Hash, error)\n")),Object(r.b)("p",null,"SendTransaction signs and sends transaction to conflux node and returns the\ntransaction hash."),Object(r.b)("h4",{id:"func-client-setaccountmanager"},"func (*Client) SetAccountManager"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) SetAccountManager(accountManager AccountManagerOperator)\n")),Object(r.b)("p",null,"SetAccountManager sets account manager for sign transaction"),Object(r.b)("h4",{id:"func-client-signencodedtransactionandsend"},"func (*Client) SignEncodedTransactionAndSend"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) SignEncodedTransactionAndSend(encodedTx []byte, v byte, r, s []byte) (*types.Transaction, error)\n")),Object(r.b)("p",null,'SignEncodedTransactionAndSend signs RLP encoded transaction "encodedTx" by\nsignature "r,s,v" and sends it to node, and returns responsed transaction.'),Object(r.b)("h4",{id:"func-client-subscribeepochs"},"func (*Client) SubscribeEpochs"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) SubscribeEpochs(channel chan types.WebsocketEpochResponse) (*rpc.ClientSubscription, error)\n")),Object(r.b)("p",null,"SubscribeEpochs subscribes consensus results: the total order of blocks, as\nexpressed by a sequence of epochs."),Object(r.b)("h4",{id:"func-client-subscribelogs"},"func (*Client) SubscribeLogs"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) SubscribeLogs(logChannel chan types.Log, chainReorgChannel chan types.ChainReorg, filter types.LogFilter) (*rpc.ClientSubscription, error)\n")),Object(r.b)("p",null,"SubscribeLogs subscribes all logs matching a certain filter, in order."),Object(r.b)("h4",{id:"func-client-subscribenewheads"},"func (*Client) SubscribeNewHeads"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) SubscribeNewHeads(channel chan types.BlockHeader) (*rpc.ClientSubscription, error)\n")),Object(r.b)("p",null,"SubscribeNewHeads subscribes all new block headers participating in the\nconsensus."),Object(r.b)("h4",{id:"func-client-waitfortransationbepacked"},"func (*Client) WaitForTransationBePacked"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) WaitForTransationBePacked(txhash types.Hash, duration time.Duration) (*types.Transaction, error)\n")),Object(r.b)("p",null,"WaitForTransationBePacked returns transaction when it is packed"),Object(r.b)("h4",{id:"func-client-waitfortransationreceipt"},"func (*Client) WaitForTransationReceipt"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (client *Client) WaitForTransationReceipt(txhash types.Hash, duration time.Duration) (*types.TransactionReceipt, error)\n")),Object(r.b)("p",null,"WaitForTransationReceipt waits for transaction receipt valid"),Object(r.b)("h3",{id:"type-contract"},"type Contract"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"type Contract struct {\n    ABI     abi.ABI\n    Client  ClientOperator\n    Address *types.Address\n}\n")),Object(r.b)("p",null,"Contract represents a smart contract. You can conveniently create contract by\nClient.GetContract or Client.DeployContract."),Object(r.b)("h4",{id:"func--newcontract"},"func  NewContract"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func NewContract(abiJSON []byte, client ClientOperator, address *types.Address) (*Contract, error)\n")),Object(r.b)("p",null,"NewContract creates contract by abi and deployed address"),Object(r.b)("h4",{id:"func-contract-call"},"func (*Contract) Call"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (contract *Contract) Call(option *types.ContractMethodCallOption, resultPtr interface{}, method string, args ...interface{}) error\n")),Object(r.b)("p",null,'Call calls to the contract method with args and fills the excuted result to the\n"resultPtr".'),Object(r.b)("p",null,"the resultPtr should be a pointer of the method output struct type."),Object(r.b)("p",null,"please refer\n",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"https://github.com/Conflux-Chain/go-conflux-sdk/blob/master/README.md"}),"https://github.com/Conflux-Chain/go-conflux-sdk/blob/master/README.md")," to get the\nmappings of solidity types to go types"),Object(r.b)("h4",{id:"func-contract-decodeevent"},"func (*Contract) DecodeEvent"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (contract *Contract) DecodeEvent(out interface{}, event string, log types.LogEntry) error\n")),Object(r.b)("p",null,"DecodeEvent unpacks a retrieved log into the provided output structure."),Object(r.b)("p",null,"please refer\n",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"https://github.com/Conflux-Chain/go-conflux-sdk/blob/master/README.md"}),"https://github.com/Conflux-Chain/go-conflux-sdk/blob/master/README.md")," to get the\nmappings of solidity types to go types"),Object(r.b)("h4",{id:"func-contract-getdata"},"func (*Contract) GetData"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (contract *Contract) GetData(method string, args ...interface{}) ([]byte, error)\n")),Object(r.b)("p",null,"GetData packs the given method name to conform the ABI of the contract. Method\ncall's data will consist of method_id, args0, arg1, ... argN. Method id consists\nof 4 bytes and arguments are all 32 bytes. Method ids are created from the first\n4 bytes of the hash of the methods string signature. (signature =\nbaz(uint32,string32))"),Object(r.b)("p",null,"please refer\n",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"https://github.com/Conflux-Chain/go-conflux-sdk/blob/master/README.md"}),"https://github.com/Conflux-Chain/go-conflux-sdk/blob/master/README.md")," to get the\nmappings of solidity types to go types"),Object(r.b)("h4",{id:"func-contract-sendtransaction"},"func (*Contract) SendTransaction"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (contract *Contract) SendTransaction(option *types.ContractMethodSendOption, method string, args ...interface{}) (*types.Hash, error)\n")),Object(r.b)("p",null,"SendTransaction sends a transaction to the contract method with args and returns\nits transaction hash"),Object(r.b)("p",null,"please refer\n",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"https://github.com/Conflux-Chain/go-conflux-sdk/blob/master/README.md"}),"https://github.com/Conflux-Chain/go-conflux-sdk/blob/master/README.md")," to get the\nmappings of solidity types to go types"),Object(r.b)("h3",{id:"type-contractdeployresult"},"type ContractDeployResult"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"type ContractDeployResult struct {\n    //DoneChannel channel for notifying when contract deployed done\n    DoneChannel      <-chan struct{}\n    TransactionHash  *types.Hash\n    Error            error\n    DeployedContract *Contract\n}\n")),Object(r.b)("p",null,"ContractDeployResult for state change notification when deploying contract"),Object(r.b)("h2",{id:"package-utils"},"package utils"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{}),'import "github.com/Conflux-Chain/go-conflux-sdk/utils"\n')),Object(r.b)("h4",{id:"func--calcblockconfirmationrisk"},"func  CalcBlockConfirmationRisk"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func CalcBlockConfirmationRisk(rawConfirmationRisk *big.Int) *big.Float\n")),Object(r.b)("p",null,"CalcBlockConfirmationRisk calculates block revert rate"),Object(r.b)("h4",{id:"func--has0xprefix"},"func  Has0xPrefix"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func Has0xPrefix(input string) bool\n")),Object(r.b)("p",null,"Has0xPrefix returns true if input starts with '0x' or '0X'"),Object(r.b)("h4",{id:"func--hexstringtobytes"},"func  HexStringToBytes"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func HexStringToBytes(hexStr string) (hexutil.Bytes, error)\n")),Object(r.b)("p",null,"HexStringToBytes converts hex string to bytes"),Object(r.b)("h4",{id:"func--isnil"},"func  IsNil"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func IsNil(i interface{}) bool\n")),Object(r.b)("p",null,"IsNil sepecialy checks if interface object is nil"),Object(r.b)("h4",{id:"func--keccak256"},"func  Keccak256"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func Keccak256(hexStr string) (string, error)\n")),Object(r.b)("p",null,"Keccak256 hashes hex string by keccak256 and returns it's hash value"),Object(r.b)("h4",{id:"func--privatekeytopublickey"},"func  PrivateKeyToPublicKey"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func PrivateKeyToPublicKey(privateKey string) string\n")),Object(r.b)("p",null,"PrivateKeyToPublicKey calculates public key from private key"),Object(r.b)("h4",{id:"func--publickeytoaddress"},"func  PublicKeyToAddress"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func PublicKeyToAddress(publicKey string) types.Address\n")),Object(r.b)("p",null,"PublicKeyToAddress generate address from public key"),Object(r.b)("p",null,"Account address in conflux starts with '0x1'"),Object(r.b)("h4",{id:"func--tocfxgeneraladdress"},"func  ToCfxGeneralAddress"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func ToCfxGeneralAddress(address common.Address) types.Address\n")),Object(r.b)("p",null,"ToCfxGeneralAddress converts a normal address to conflux customerd general\naddress whose hex string starts with '0x1'"),Object(r.b)("h2",{id:"package-internalcontract"},"package internalcontract"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{}),'import "github.com/Conflux-Chain/go-conflux-sdk/contract_meta/internal_contract"\n')),Object(r.b)("h3",{id:"type-admincontrol"},"type AdminControl"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"type AdminControl struct {\n    sdk.Contract\n}\n")),Object(r.b)("p",null,"AdminControl contract"),Object(r.b)("h4",{id:"func--newadmincontrol"},"func  NewAdminControl"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func NewAdminControl(client sdk.ClientOperator) *AdminControl\n")),Object(r.b)("p",null,"NewAdminControl gets the AdminControl contract object"),Object(r.b)("h4",{id:"func-admincontrol-destroy"},"func (*AdminControl) Destroy"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (ac *AdminControl) Destroy(option *types.ContractMethodSendOption, contractAddr types.Address) (*types.Hash, error)\n")),Object(r.b)("p",null,"Destroy destroies contract ",Object(r.b)("inlineCode",{parentName:"p"},"contractAddr"),"."),Object(r.b)("h4",{id:"func-admincontrol-getadmin"},"func (*AdminControl) GetAdmin"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (ac *AdminControl) GetAdmin(option *types.ContractMethodCallOption, contractAddr types.Address) (result *types.Address, err error)\n")),Object(r.b)("p",null,"GetAdmin returns admin of specific contract"),Object(r.b)("h4",{id:"func-admincontrol-setadmin"},"func (*AdminControl) SetAdmin"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (ac *AdminControl) SetAdmin(option *types.ContractMethodSendOption, contractAddr types.Address, newAdmin types.Address) (*types.Hash, error)\n")),Object(r.b)("p",null,"SetAdmin sets the administrator of contract ",Object(r.b)("inlineCode",{parentName:"p"},"contractAddr")," to ",Object(r.b)("inlineCode",{parentName:"p"},"newAdmin"),"."),Object(r.b)("h3",{id:"type-sponsor"},"type Sponsor"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"type Sponsor struct {\n    sdk.Contract\n}\n")),Object(r.b)("p",null,"Sponsor represents SponsorWhitelistControl contract"),Object(r.b)("h4",{id:"func--newsponsor"},"func  NewSponsor"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func NewSponsor(client sdk.ClientOperator) *Sponsor\n")),Object(r.b)("p",null,"NewSponsor gets the SponsorWhitelistControl contract object"),Object(r.b)("h4",{id:"func-sponsor-addprivilegebyadmin"},"func (*Sponsor) AddPrivilegeByAdmin"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Sponsor) AddPrivilegeByAdmin(option *types.ContractMethodSendOption, contractAddr types.Address, userAddresses []types.Address) (*types.Hash, error)\n")),Object(r.b)("p",null,"AddPrivilegeByAdmin for admin adds user to whitelist"),Object(r.b)("h4",{id:"func-sponsor-getsponsorforcollateral"},"func (*Sponsor) GetSponsorForCollateral"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Sponsor) GetSponsorForCollateral(option *types.ContractMethodCallOption, contractAddr types.Address) (*types.Address, error)\n")),Object(r.b)("p",null,"GetSponsorForCollateral gets collateral sponsor address"),Object(r.b)("h4",{id:"func-sponsor-getsponsorforgas"},"func (*Sponsor) GetSponsorForGas"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Sponsor) GetSponsorForGas(option *types.ContractMethodCallOption, contractAddr types.Address) (*types.Address, error)\n")),Object(r.b)("p",null,"GetSponsorForGas gets gas sponsor address of specific contract"),Object(r.b)("h4",{id:"func-sponsor-getsponsoredbalanceforcollateral"},"func (*Sponsor) GetSponsoredBalanceForCollateral"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Sponsor) GetSponsoredBalanceForCollateral(option *types.ContractMethodCallOption, contractAddr types.Address) (*big.Int, error)\n")),Object(r.b)("p",null,"GetSponsoredBalanceForCollateral gets current Sponsored Balance for collateral"),Object(r.b)("h4",{id:"func-sponsor-getsponsoredbalanceforgas"},"func (*Sponsor) GetSponsoredBalanceForGas"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Sponsor) GetSponsoredBalanceForGas(option *types.ContractMethodCallOption, contractAddr types.Address) (*big.Int, error)\n")),Object(r.b)("p",null,"GetSponsoredBalanceForGas gets current Sponsored Balance for gas"),Object(r.b)("h4",{id:"func-sponsor-getsponsoredgasfeeupperbound"},"func (*Sponsor) GetSponsoredGasFeeUpperBound"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Sponsor) GetSponsoredGasFeeUpperBound(option *types.ContractMethodCallOption, contractAddr types.Address) (*big.Int, error)\n")),Object(r.b)("p",null,"GetSponsoredGasFeeUpperBound gets current Sponsored Gas fee upper bound"),Object(r.b)("h4",{id:"func-sponsor-isallwhitelisted"},"func (*Sponsor) IsAllWhitelisted"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Sponsor) IsAllWhitelisted(option *types.ContractMethodCallOption, contractAddr types.Address) (bool, error)\n")),Object(r.b)("p",null,"IsAllWhitelisted checks if all users are in a contract's whitelist"),Object(r.b)("h4",{id:"func-sponsor-iswhitelisted"},"func (*Sponsor) IsWhitelisted"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Sponsor) IsWhitelisted(option *types.ContractMethodCallOption, contractAddr types.Address, userAddr types.Address) (bool, error)\n")),Object(r.b)("p",null,"IsWhitelisted checks if a user is in a contract's whitelist"),Object(r.b)("h4",{id:"func-sponsor-removeprivilegebyadmin"},"func (*Sponsor) RemovePrivilegeByAdmin"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Sponsor) RemovePrivilegeByAdmin(option *types.ContractMethodSendOption, contractAddr types.Address, userAddresses []types.Address) (*types.Hash, error)\n")),Object(r.b)("p",null,"RemovePrivilegeByAdmin for admin removes user from whitelist"),Object(r.b)("h4",{id:"func-sponsor-setsponsorforcollateral"},"func (*Sponsor) SetSponsorForCollateral"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Sponsor) SetSponsorForCollateral(option *types.ContractMethodSendOption, contractAddr types.Address) (*types.Hash, error)\n")),Object(r.b)("p",null,"SetSponsorForCollateral for someone sponsor the storage collateral for contract\n",Object(r.b)("inlineCode",{parentName:"p"},"contractAddr"),", it is payable"),Object(r.b)("h4",{id:"func-sponsor-setsponsorforgas"},"func (*Sponsor) SetSponsorForGas"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Sponsor) SetSponsorForGas(option *types.ContractMethodSendOption, contractAddr types.Address, upperBound *big.Int) (*types.Hash, error)\n")),Object(r.b)("p",null,"SetSponsorForGas for someone sponsor the gas cost for contract ",Object(r.b)("inlineCode",{parentName:"p"},"contractAddr"),"\nwith an ",Object(r.b)("inlineCode",{parentName:"p"},"upper_bound")," for a single transaction, it is payable"),Object(r.b)("h3",{id:"type-staking"},"type Staking"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"type Staking struct {\n    sdk.Contract\n}\n")),Object(r.b)("p",null,"Staking contract"),Object(r.b)("h4",{id:"func--newstaking"},"func  NewStaking"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func NewStaking(client sdk.ClientOperator) *Staking\n")),Object(r.b)("p",null,"NewStaking gets the Staking contract object"),Object(r.b)("h4",{id:"func-staking-deposit"},"func (*Staking) Deposit"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Staking) Deposit(option *types.ContractMethodSendOption, amount *big.Int) (*types.Hash, error)\n")),Object(r.b)("p",null,"Deposit ",Object(r.b)("inlineCode",{parentName:"p"},"amount")," cfx in this contract"),Object(r.b)("h4",{id:"func-staking-getlockedstakingbalance"},"func (*Staking) GetLockedStakingBalance"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (ac *Staking) GetLockedStakingBalance(option *types.ContractMethodCallOption, user types.Address, blockNumber *big.Int) (*big.Int, error)\n")),Object(r.b)("p",null,"GetLockedStakingBalance returns user's locked staking balance at given\nblockNumber Note: if the blockNumber is less than the current block number,\nfunction will return current locked staking balance."),Object(r.b)("h4",{id:"func-staking-getstakingbalance"},"func (*Staking) GetStakingBalance"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (ac *Staking) GetStakingBalance(option *types.ContractMethodCallOption, user types.Address) (*big.Int, error)\n")),Object(r.b)("p",null,"GetStakingBalance returns user's staking balance"),Object(r.b)("h4",{id:"func-staking-getvotepower"},"func (*Staking) GetVotePower"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (ac *Staking) GetVotePower(option *types.ContractMethodCallOption, user types.Address, blockNumber *big.Int) (*big.Int, error)\n")),Object(r.b)("p",null,"GetVotePower returns user's vote power staking balance at given blockNumber"),Object(r.b)("h4",{id:"func-staking-votelock"},"func (*Staking) VoteLock"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Staking) VoteLock(option *types.ContractMethodSendOption, amount *big.Int, unlockBlockNumber *big.Int) (*types.Hash, error)\n")),Object(r.b)("p",null,"VoteLock will locks ",Object(r.b)("inlineCode",{parentName:"p"},"amount")," cfx from current to next ",Object(r.b)("inlineCode",{parentName:"p"},"unlockBlockNumber")," blocks\nfor obtain vote power"),Object(r.b)("h4",{id:"func-staking-withdraw"},"func (*Staking) Withdraw"),Object(r.b)("pre",null,Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-go"}),"func (s *Staking) Withdraw(option *types.ContractMethodSendOption, amount *big.Int) (*types.Hash, error)\n")),Object(r.b)("p",null,"Withdraw ",Object(r.b)("inlineCode",{parentName:"p"},"amount")," cfx from this contract"))}b.isMDXComponent=!0},210:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return g}));var c=n(0),a=n.n(c);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);t&&(c=c.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,c)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,c,a=function(e,t){if(null==e)return{};var n,c,a={},r=Object.keys(e);for(c=0;c<r.length;c++)n=r[c],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(c=0;c<r.length;c++)n=r[c],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=a.a.createContext({}),b=function(e){var t=a.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=b(e.components);return a.a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,c=e.mdxType,r=e.originalType,o=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),p=b(n),d=c,g=p["".concat(o,".").concat(d)]||p[d]||u[d]||r;return n?a.a.createElement(g,s(s({ref:t},i),{},{components:n})):a.a.createElement(g,s({ref:t},i))}));function g(e,t){var n=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:c,o[1]=s;for(var i=2;i<r;i++)o[i]=n[i];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);