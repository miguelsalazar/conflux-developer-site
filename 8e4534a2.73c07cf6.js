(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{182:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(2),o=n(9),l=(n(0),n(211)),r={id:"installation",title:"Installation",custom_edit_url:"https://github.com/Conflux-Chain/conflux-doc/edit/master/docs/install.md",keywords:["conflux","install"]},i={id:"conflux-doc/docs/installation",title:"Installation",description:"Here is a step by step guide on how to build Conflux from the source code and get a node running.",source:"@site/docs/conflux-doc/docs/install.md",permalink:"/docs/conflux-doc/docs/installation",editUrl:"https://github.com/Conflux-Chain/conflux-doc/edit/master/docs/install.md",lastUpdatedAt:1611887628,sidebar:"docs",previous:{title:"Conflux Overview",permalink:"/docs/introduction/en/conflux_overview"},next:{title:"Getting Started",permalink:"/docs/conflux-doc/docs/get_started"}},c=[{value:"Install Build Dependencies",id:"install-build-dependencies",children:[{value:"Linux",id:"linux",children:[]},{value:"OSX",id:"osx",children:[]},{value:"Windows",id:"windows",children:[]}]},{value:"Build from Source Code",id:"build-from-source-code",children:[]},{value:"Install Test Dependencies",id:"install-test-dependencies",children:[]},{value:"Download compiled node binary",id:"download-compiled-node-binary",children:[]}],s={rightToc:c};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Here is a step by step guide on how to build Conflux from the source code and get a node running."),Object(l.b)("h2",{id:"install-build-dependencies"},"Install Build Dependencies"),Object(l.b)("p",null,"Conflux requires ",Object(l.b)("strong",{parentName:"p"},"Rust 1.47.0"),", ",Object(l.b)("inlineCode",{parentName:"p"},"clang"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"sqlite")," to build."),Object(l.b)("p",null,"We recommend installing Rust through ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.rustup.rs/"}),"rustup"),". If you don't already have ",Object(l.b)("inlineCode",{parentName:"p"},"rustup")," or ",Object(l.b)("inlineCode",{parentName:"p"},"clang"),", you can install them like this:"),Object(l.b)("h3",{id:"linux"},"Linux"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"$ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n$ rustup install 1.47.0\n")),Object(l.b)("p",null,"Other dependencies including ",Object(l.b)("inlineCode",{parentName:"p"},"clang"),", ",Object(l.b)("inlineCode",{parentName:"p"},"cmake (version >= 3.1)")," and ",Object(l.b)("inlineCode",{parentName:"p"},"sqlite (version >= 3.8.3)")," can be installed with:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Ubuntu 18.04:")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"$ sudo apt-get install clang libsqlite3-dev pkg-config libssl-dev cmake\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"CentOS 7 / RHEL:")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"$ sudo yum install epel-release\n$ sudo yum install clang gcc gcc-c++ openssl-devel cmake3 wget\n\n# This may fail if you have installed cmake with version 2.8.\n# You can choose to uninstall cmake first.\n$ sudo ln -s /usr/bin/cmake3 /usr/bin/cmake\n\n# The official sqlite version on CentOS 7 is 3.7.17, so we need to install the latest version from the source code.\n# The source code have be downloaded from https://www.sqlite.org/download.html\n$ wget https://www.sqlite.org/2020/sqlite-autoconf-3320100.tar.gz\n$ tar xfvz sqlite-autoconf-3320100.tar.gz\n$ cd sqlite-autoconf-3320100\n$ ./configure\n$ make\n$ sudo make install\n")),Object(l.b)("h3",{id:"osx"},"OSX"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"$ curl https://sh.rustup.rs -sSf | sh\n$ rustup install 1.47.0\n")),Object(l.b)("p",null,"You might need to install ",Object(l.b)("inlineCode",{parentName:"p"},"brew")," if you need to use it to install ",Object(l.b)("inlineCode",{parentName:"p"},"clang"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),'$ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"\n')),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"clang")," comes with Xcode command line tools, and can also be installed with homebrew:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"$ brew install llvm\n")),Object(l.b)("h3",{id:"windows"},"Windows"),Object(l.b)("p",null,"Make sure you have Visual Studio 2015 with C++ support installed. Next, download and run the ",Object(l.b)("inlineCode",{parentName:"p"},"rustup")," installer from ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe"}),"this link"),", start ",Object(l.b)("inlineCode",{parentName:"p"},"VS2015 x64 Native Tools Command Prompt"),", and use the following command to install and set up the ",Object(l.b)("inlineCode",{parentName:"p"},"msvc")," toolchain:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"$ rustup default stable-x86_64-pc-windows-msvc\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"clang")," can be installed with LLVM. Pre-built binaries can be downloaded from ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://releases.llvm.org/download.html#8.0.0"}),"Download LLVM"),". Make sure to add LLVM to the system PATH as instructed."),Object(l.b)("p",null,"Make sure that these binaries are in your ",Object(l.b)("inlineCode",{parentName:"p"},"PATH")," (the instruction will be shown after installing ",Object(l.b)("inlineCode",{parentName:"p"},"rustup"),"). After that, you should be able to build Conflux from source."),Object(l.b)("h2",{id:"build-from-source-code"},"Build from Source Code"),Object(l.b)("p",null,"After installing the dependencies mentioned above, now you can clone our repository and start building the executable binary:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# download Conflux code\n$ git clone https://github.com/Conflux-Chain/conflux-rust\n$ cd conflux-rust\n$ git checkout v1.1.0\n\n\n# build in release mode\n$ cargo build --release\n")),Object(l.b)("p",null,"This produces an executable in the ",Object(l.b)("inlineCode",{parentName:"p"},"./target/release")," subdirectory."),Object(l.b)("p",null,"Note, when compiling a crate and you receive errors, it's in most cases your\noutdated version of Rust, or some of your crates have to be recompiled.\nCleaning the repository will most likely solve the issue if you are on the\nlatest stable version of Rust, try:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ cargo clean && cargo update\n")),Object(l.b)("p",null,"To start running a Conflux full node, you can follow the instructions at ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/conflux-doc/docs/get_started#running-conflux-full-node"}),"Running Conflux Full Node"),"."),Object(l.b)("h2",{id:"install-test-dependencies"},"Install Test Dependencies"),Object(l.b)("p",null,"We have a test framework written in Python3 (version>=3.6). Required packages can be installed by running"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ ./dev-support/dep_pip3.sh\n")),Object(l.b)("p",null,"Solidity compiler ",Object(l.b)("inlineCode",{parentName:"p"},"solc")," is also required, and be installed as follows:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Ubuntu")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"$ sudo add-apt-repository ppa:ethereum/ethereum\n$ sudo apt-get update\n$ sudo apt-get install solc\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"OSX")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"$ brew update\n$ brew upgrade\n$ brew tap ethereum/ethereum\n$ brew install solidity\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Others")),Object(l.b)("p",null,"You can follow the detailed instructions at ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://solidity.readthedocs.io/en/v0.5.7/installing-solidity.html#binary-packages"}),"Installing the Solidity Compiler"),"."),Object(l.b)("p",null,"Note that latest solidity compiler may be incompatible with Conflux and may cause the integration test to fail. If you encounter such problem, please install solidity compiler version 0.5.2."),Object(l.b)("p",null,"To run tests, you can build the source code first and follow the instructions at ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/conflux-doc/docs/get_started#running-test"}),"Running Test"),"."),Object(l.b)("h2",{id:"download-compiled-node-binary"},"Download compiled node binary"),Object(l.b)("p",null,"If you don't want to build the node from the source code, you can directly download the pre-compiled binary from ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Conflux-Chain/conflux-rust/releases"}),"github release page"),". We provide the binaries for Windows, Linux, and OSX. There are two release lines: mainnet and testnet (with suffix ",Object(l.b)("inlineCode",{parentName:"p"},"testnet"),"). If you want to run a mainnet node, you should choose ",Object(l.b)("inlineCode",{parentName:"p"},"Conflux vx.x.x"),", and if you want to run a testnet node, please choose ",Object(l.b)("inlineCode",{parentName:"p"},"Conflux vx.x.x-testnet"),". mainnet release uses config file ",Object(l.b)("inlineCode",{parentName:"p"},"tethys.toml"),", while testnet release uses config file ",Object(l.b)("inlineCode",{parentName:"p"},"testnet.toml"),", and the values of the keys ",Object(l.b)("inlineCode",{parentName:"p"},"bootnodes")," and ",Object(l.b)("inlineCode",{parentName:"p"},"chain_id")," of the two config files are different.\nAfter downloading and unzipping the release file, you can run the node with ",Object(l.b)("inlineCode",{parentName:"p"},"start.sh")," or ",Object(l.b)("inlineCode",{parentName:"p"},"start.bat"),"(Windows)"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ ./start.sh\n")))}u.isMDXComponent=!0},211:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),u=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},b=function(e){var t=u(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},p=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=u(n),p=a,m=b["".concat(r,".").concat(p)]||b[p]||d[p]||l;return n?o.a.createElement(m,i(i({ref:t},s),{},{components:n})):o.a.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var s=2;s<l;s++)r[s]=n[s];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);