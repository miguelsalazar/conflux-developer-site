(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{197:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return r})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return o}));var n=a(2),b=a(9),c=(a(0),a(211)),l={},r={id:"conflux-doc/docs/javascript-api",title:"javascript-api",description:"----------",source:"@site/docs/conflux-doc/docs/javascript-api.md",permalink:"/docs/conflux-doc/docs/javascript-api",editUrl:"https://github.com/Conflux-Chain/conflux-developer-site/edit/master/docs/conflux-doc/docs/javascript-api.md",lastUpdatedAt:1611887628},i=[{value:"Hash Time Locked Contract",id:"hash-time-locked-contract",children:[]},{value:"ConfluxWeb",id:"confluxweb",children:[{value:"ConfluxWeb.providers",id:"confluxwebproviders",children:[]},{value:"ConfluxWeb.modules",id:"confluxwebmodules",children:[]},{value:"ConfluxWeb.utils",id:"confluxwebutils",children:[]},{value:"ConfluxWeb.version",id:"confluxwebversion",children:[]},{value:"ConfluxWeb.currentProvider",id:"confluxwebcurrentprovider",children:[]},{value:"ConfluxWeb.setProvider",id:"confluxwebsetprovider",children:[]}]},{value:"ConfluxWeb.cfx.Contract",id:"confluxwebcfxcontract",children:[{value:"ConfluxWeb.cfx.Contract.abiModel",id:"confluxwebcfxcontractabimodel",children:[]},{value:"ConfluxWeb.cfx.Contract.address",id:"confluxwebcfxcontractaddress",children:[]},{value:"ConfluxWeb.cfx.Contract.defaultGas",id:"confluxwebcfxcontractdefaultgas",children:[]},{value:"ConfluxWeb.cfx.Contract.defaultGasPrice",id:"confluxwebcfxcontractdefaultgasprice",children:[]},{value:"ConfluxWeb.cfx.Contract.methods",id:"confluxwebcfxcontractmethods",children:[]},{value:"ConfluxWeb.cfx.Contract.constructor",id:"confluxwebcfxcontractconstructor",children:[]},{value:"ConfluxWeb.cfx.Contract.deploy",id:"confluxwebcfxcontractdeploy",children:[]},{value:"ConfluxWeb.cfx.Contract.clone",id:"confluxwebcfxcontractclone",children:[]}]},{value:"ConfluxWeb.cfx",id:"confluxwebcfx",children:[{value:"ConfluxWeb.cfx.defaultAccount",id:"confluxwebcfxdefaultaccount",children:[]},{value:"ConfluxWeb.cfx.defaultEpoch",id:"confluxwebcfxdefaultepoch",children:[]},{value:"ConfluxWeb.cfx.currentProvider",id:"confluxwebcfxcurrentprovider",children:[]},{value:"ConfluxWeb.cfx.setProvider",id:"confluxwebcfxsetprovider",children:[]},{value:"ConfluxWeb.cfx.getGasPrice",id:"confluxwebcfxgetgasprice",children:[]},{value:"ConfluxWeb.cfx.getEpochNumber",id:"confluxwebcfxgetepochnumber",children:[]},{value:"Example",id:"example-17",children:[]},{value:"ConfluxWeb.cfx.getBalance",id:"confluxwebcfxgetbalance",children:[]},{value:"ConfluxWeb.cfx.getCode",id:"confluxwebcfxgetcode",children:[]},{value:"ConfluxWeb.cfx.getBlock",id:"confluxwebcfxgetblock",children:[]},{value:"ConfluxWeb.cfx.getTransaction",id:"confluxwebcfxgettransaction",children:[]},{value:"ConfluxWeb.cfx.getTransactionCount",id:"confluxwebcfxgettransactioncount",children:[]},{value:"ConfluxWeb.cfx.sendSignedTransaction",id:"confluxwebcfxsendsignedtransaction",children:[]},{value:"ConfluxWeb.cfx.signTransaction",id:"confluxwebcfxsigntransaction",children:[]},{value:"ConfluxWeb.cfx.call",id:"confluxwebcfxcall",children:[]},{value:"ConfluxWeb.cfx.estimateGas",id:"confluxwebcfxestimategas",children:[]},{value:"ConfluxWeb.cfx.getTransactionReceipt",id:"confluxwebcfxgettransactionreceipt",children:[]},{value:"ConfluxWeb.cfx.getPastLogs",id:"confluxwebcfxgetpastlogs",children:[]}]},{value:"ConfluxWeb.cfx.account",id:"confluxwebcfxaccount",children:[{value:"ConfluxWeb.cfx.account.create",id:"confluxwebcfxaccountcreate",children:[]},{value:"ConfluxWeb.cfx.account.privateKeyToAccount",id:"confluxwebcfxaccountprivatekeytoaccount",children:[]},{value:"ConfluxWeb.cfx.account.recoverTransaction",id:"confluxwebcfxaccountrecovertransaction",children:[]},{value:"ConfluxWeb.cfx.account.hashMessage",id:"confluxwebcfxaccounthashmessage",children:[]},{value:"ConfluxWeb.cfx.account.sign",id:"confluxwebcfxaccountsign",children:[]},{value:"ConfluxWeb.cfx.account.recover",id:"confluxwebcfxaccountrecover",children:[]}]},{value:"ConfluxWeb.cfx.account.wallet",id:"confluxwebcfxaccountwallet",children:[{value:"ConfluxWeb.cfx.account.wallet.create",id:"confluxwebcfxaccountwalletcreate",children:[]},{value:"ConfluxWeb.cfx.account.wallet.add",id:"confluxwebcfxaccountwalletadd",children:[]},{value:"ConfluxWeb.cfx.account.wallet.remove",id:"confluxwebcfxaccountwalletremove",children:[]},{value:"ConfluxWeb.cfx.account.wallet.clear",id:"confluxwebcfxaccountwalletclear",children:[]}]},{value:"ConfluxWeb.cfx.Contract.methods",id:"confluxwebcfxcontractmethods-1",children:[{value:"ConfluxWeb.cfx.Contract.methods.encodeABI",id:"confluxwebcfxcontractmethodsencodeabi",children:[]},{value:"ConfluxWeb.cfx.Contract.methods.estimateGas",id:"confluxwebcfxcontractmethodsestimategas",children:[]},{value:"ConfluxWeb.cfx.Contract.methods.call",id:"confluxwebcfxcontractmethodscall",children:[]},{value:"ConfluxWeb.cfx.Contract.methods.send",id:"confluxwebcfxcontractmethodssend",children:[]}]},{value:"ConfluxWeb.utils",id:"confluxwebutils-1",children:[{value:"ConfluxWeb.utils.randomHex",id:"confluxwebutilsrandomhex",children:[]},{value:"ConfluxWeb.utils.isBN",id:"confluxwebutilsisbn",children:[]},{value:"ConfluxWeb.utils.sha3",id:"confluxwebutilssha3",children:[]},{value:"ConfluxWeb.utils.soliditySha3",id:"confluxwebutilssoliditysha3",children:[]},{value:"ConfluxWeb.utils.isHex",id:"confluxwebutilsishex",children:[]},{value:"ConfluxWeb.utils.isHexStrict",id:"confluxwebutilsishexstrict",children:[]},{value:"ConfluxWeb.utils.isAddress",id:"confluxwebutilsisaddress",children:[]},{value:"ConfluxWeb.utils.toChecksumAddress",id:"confluxwebutilstochecksumaddress",children:[]},{value:"ConfluxWeb.utils.checkAddressChecksum",id:"confluxwebutilscheckaddresschecksum",children:[]},{value:"ConfluxWeb.utils.toHex",id:"confluxwebutilstohex",children:[]},{value:"ConfluxWeb.utils.toBN",id:"confluxwebutilstobn",children:[]},{value:"ConfluxWeb.utils.hexToNumber",id:"confluxwebutilshextonumber",children:[]},{value:"ConfluxWeb.utils.hexToNumberString",id:"confluxwebutilshextonumberstring",children:[]},{value:"ConfluxWeb.utils.numberToHex",id:"confluxwebutilsnumbertohex",children:[]},{value:"ConfluxWeb.utils.hexToUtf8",id:"confluxwebutilshextoutf8",children:[]},{value:"ConfluxWeb.utils.hexToAscii",id:"confluxwebutilshextoascii",children:[]},{value:"ConfluxWeb.utils.utf8ToHex",id:"confluxwebutilsutf8tohex",children:[]},{value:"ConfluxWeb.utils.asciiToHex",id:"confluxwebutilsasciitohex",children:[]},{value:"ConfluxWeb.utils.hexToBytes",id:"confluxwebutilshextobytes",children:[]},{value:"ConfluxWeb.utils.bytesToHex",id:"confluxwebutilsbytestohex",children:[]},{value:"ConfluxWeb.utils.toDrip",id:"confluxwebutilstodrip",children:[]},{value:"ConfluxWeb.utils.fromDrip",id:"confluxwebutilsfromdrip",children:[]},{value:"ConfluxWeb.utils.padLeft",id:"confluxwebutilspadleft",children:[]},{value:"ConfluxWeb.utils.padRight",id:"confluxwebutilspadright",children:[]},{value:"ConfluxWeb.utils.toTwosComplement",id:"confluxwebutilstotwoscomplement",children:[]}]}],u={rightToc:i};function o(e){var t=e.components,a=Object(b.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},u,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("hr",null),Object(c.b)("h1",{id:"getting-started-with-confluxweb"},"Getting Started with ConfluxWeb"),Object(c.b)("p",null,"The conflux-web library is a collection of modules which contain specific functionality for the conflux ecosystem."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"The ",Object(c.b)("inlineCode",{parentName:"p"},"conflux-web-cfx")," is for the conflux blockchain and smart contracts.")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"The ",Object(c.b)("inlineCode",{parentName:"p"},"conflux-web-utils")," contains useful helper functions for Dapp developers.")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Adding conflux-web")),Object(c.b)("p",null,"First you need to get conflux-web into your project. This can be done using the following methods:"),Object(c.b)("p",null,"npm: ",Object(c.b)("inlineCode",{parentName:"p"},"npm install conflux-web")),Object(c.b)("p",null,"After that you need to create a confluxWeb instance and set a provider. Normally you should connect to a remote/local node."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const ConfluxWeb = require('conflux-web');\nconst confluxWeb = new ConfluxWeb('http://testnet-jsonrpc.conflux-chain.org:12537');\n")),Object(c.b)("p",null,"That\u2019s it! now you can use the confluxWeb object."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Using Promises")),Object(c.b)("p",null,"All of functions use asynchronous HTTP requests and return promises by default:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const ConfluxWeb = require('conflux-web');\nconst confluxWeb = new ConfluxWeb('http://testnet-jsonrpc.conflux-chain.org:12537');\nconfluxWeb.cfx.getEpochNumber().then(console.log);\n")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A note on big numbers")),Object(c.b)("p",null,"You will always get a BigNumber object for number values as JavaScript is not able to handle big numbers correctly. Look at the following examples:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'"101010100324325345346456456456456456456"\n// "101010100324325345346456456456456456456"\n101010100324325345346456456456456456456\n// 1.0101010032432535e+38\n')),Object(c.b)("p",null,"ConfluxWeb depends on the BN.js library for big numbers, See the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/indutny/bn.js/"}),"BN.js")," documentation for details."),Object(c.b)("h1",{id:"confluxweb-by-example"},"ConfluxWeb by Example"),Object(c.b)("h2",{id:"hash-time-locked-contract"},"Hash Time Locked Contract"),Object(c.b)("p",null,Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/conflux-doc/docs/javascript-example"}),"Here")," we brought you a ConfluxWeb example.\nYou can learn how to develop a Hash Time Locked Contract (HTLC) with ConfluxWeb API."),Object(c.b)("h1",{id:"confluxweb-api-reference"},"ConfluxWeb API Reference"),Object(c.b)("h2",{id:"confluxweb"},"ConfluxWeb"),Object(c.b)("h3",{id:"confluxwebproviders"},"ConfluxWeb.providers"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Class attribute")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"object")),Object(c.b)("h4",{id:"example"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > ConfluxWeb.providers\n { HttpProvider: [Function: HttpProvider$1],\n  WebsocketProvider: [Function: WebsocketProvider$1],\n  IpcProvider: [Function: IpcProvider$1] }\n")),Object(c.b)("h3",{id:"confluxwebmodules"},"ConfluxWeb.modules"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Class attribute")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"object")),Object(c.b)("h4",{id:"example-1"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > ConfluxWeb.modules\n { Cfx: [Function: Cfx], Net: [Function: Net] }\n")),Object(c.b)("h3",{id:"confluxwebutils"},"ConfluxWeb.utils"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Class attribute\nObject attribute")),Object(c.b)("p",null,"Property of ConfluxWeb class and instance of ConfluxWeb, See confluxWeb.utils for more."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"object")),Object(c.b)("h4",{id:"example-2"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > ConfluxWeb.utils\n {...}\n\n > confluxWeb.utils\n {...}\n")),Object(c.b)("h3",{id:"confluxwebversion"},"ConfluxWeb.version"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Object attribute")),Object(c.b)("p",null,"current version"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")),Object(c.b)("h4",{id:"example-3"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.version\n 0.1.21-alpha.0\n")),Object(c.b)("h3",{id:"confluxwebcurrentprovider"},"ConfluxWeb.currentProvider"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Object attribute")),Object(c.b)("p",null,"current provider instance"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"object")),Object(c.b)("h4",{id:"example-4"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.currentProvider;\n HttpProvider {\n host: 'http://testnet-jsonrpc.conflux-chain.org:12537',\n ...\n }\n")),Object(c.b)("h3",{id:"confluxwebsetprovider"},"ConfluxWeb.setProvider"),Object(c.b)("p",null,"Will change the provider for its module."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: When called on the umbrella package cfx it will also set the provider for all sub modules confluxWeb.cfx, etc.")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function setProvider(provider)")),Object(c.b)("h4",{id:"parameters"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"provider"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"object"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A valid provider.")))),Object(c.b)("h4",{id:"return"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"boolean")," "),Object(c.b)("h4",{id:"example-5"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > const ConfluxWeb = require('conflux-web');\n > const confluxWeb = new ConfluxWeb('http://testnet-jsonrpc.conflux-chain.org:12537');\n > confluxWeb.currentProvider\n HttpProvider {\n  host: 'http://testnet-jsonrpc.conflux-chain.org:12537',\n  ...\n }\n > confluxWeb.setProvider(new ConfluxWeb.providers.HttpProvider('http://localhost:12537'));\n true\n > confluxWeb.currentProvider\n HttpProvider {\n   host: 'http://localhost:12537'\n   ...\n }\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.setProvider('http://localhost:12537'); // same as above\n true\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > confluxWeb.currentProvider.host\n "http://testnet-jsonrpc.conflux-chain.org:12537"\n > confluxWeb.cfx.currentProvider.host\n "http://testnet-jsonrpc.conflux-chain.org:12537"\n > confluxWeb.setProvider(\'http://localhost:12537\') // change all provider\n > confluxWeb.currentProvider.host\n "http://localhost:12537"\n > confluxWeb.cfx.currentProvider.host\n "http://localhost:12537"\n')),Object(c.b)("hr",null),Object(c.b)("h2",{id:"confluxwebcfxcontract"},"ConfluxWeb.cfx.Contract"),Object(c.b)("h3",{id:"confluxwebcfxcontractabimodel"},"ConfluxWeb.cfx.Contract.abiModel"),Object(c.b)("p",null,"abi object"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Object")),Object(c.b)("h4",{id:"example-6"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > contract.abiModel\n AbiModel {\n  abi:\n   { methods:\n      { count: [AbiItemModel],\n        '0x06661abd': [AbiItemModel],\n        'count()': [AbiItemModel],\n        inc: [AbiItemModel],\n        '0x812600df': [AbiItemModel],\n        'inc(uint256)': [AbiItemModel],\n        contractConstructor: [AbiItemModel] },\n     events: {} } }\n")),Object(c.b)("h3",{id:"confluxwebcfxcontractaddress"},"ConfluxWeb.cfx.Contract.address"),Object(c.b)("p",null,'The address used for this contract instance.\nAll transactions generated by confluxWeb from this contract will contain this address as the "to".'),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")),Object(c.b)("h4",{id:"example-7"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > contract.address; // What you set when new contract.\n "0xf02dbcf0eff48e174ca59f1975a7b0042c4d02b7"\n')),Object(c.b)("h3",{id:"confluxwebcfxcontractdefaultgas"},"ConfluxWeb.cfx.Contract.defaultGas"),Object(c.b)("p",null,"The default maximum gas provided for a transaction (gasLimit)."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"number")),Object(c.b)("h3",{id:"confluxwebcfxcontractdefaultgasprice"},"ConfluxWeb.cfx.Contract.defaultGasPrice"),Object(c.b)("p",null,"The default gas price in drip to use for transactions."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"number")),Object(c.b)("h3",{id:"confluxwebcfxcontractmethods"},"ConfluxWeb.cfx.Contract.methods"),Object(c.b)("p",null,"Creates a transaction object for that method, which then can be called, send, estimated.\nThe methods of this smart contract are available through:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"The name: myContract.methods.myMethod(123)"),Object(c.b)("li",{parentName:"ul"},"The name with parameters: myContract.methods",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"123"}),"'myMethod(uint256)'")),Object(c.b)("li",{parentName:"ul"},"The signature: myContract.methods",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"123"}),"'0x58cf5f10'"),"\nThis allows calling functions with same name but different parameters from the JavaScript contract object.")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Proxy")),Object(c.b)("h4",{id:"example-8"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > contract.address;\n \"0x079352147ce2de227af6fa963f603a35aed8e601\"\n\n > await contract.methods.count().call();\n BigNumber { _hex: '0xfe' }\n\n > await contract.methods.inc(1).call(); // call will get function return value\n BigNumber { _hex: '0xff' }\n\n > await contract.methods.count().call(); // can not change data in block chain by `call`\n BigNumber { _hex: '0xfe' }\n\n > await contract.methods.inc(1).send({\n    from: '0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b',\n    gas: 100000000,\n    gasPrice: 100\n  }); // send a transaction\n \"0xa3b0ca9cfbbdc624db53fc5df39849560ffa2d952b7e9af894524d45479cfa0a\"\n > await confluxWeb.cfx.getTransactionReceipt('0xa3b0ca9cfbbdc624db53fc5df39849560ffa2d952b7e9af894524d45479cfa0a');\n {\n   status: true,\n   ...\n }\n > await contract.methods.count().call(); // change data in block chain by `send`\n BigNumber { _hex: '0xff' }\n")),Object(c.b)("h3",{id:"confluxwebcfxcontractconstructor"},"ConfluxWeb.cfx.Contract.constructor"),Object(c.b)("p",null,"Creates a new contract instance with all its methods and events defined in its json interface abi object."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function constructor(abi,address,options)")),Object(c.b)("h4",{id:"parameters-1"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"abi"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"object","|","array"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The abi json interface of the contract.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The address where the contract is deployed. If undefined, you should deploy contract by data.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"object"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.data"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The byte code of the contract. Used when the contract gets deployed.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.from"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The address transactions should be made from.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.gasPrice"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The gas price in drip to use for transactions.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.gas"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The maximum gas provided for a transaction (gasLimit).")))),Object(c.b)("h4",{id:"return-1"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"void")),Object(c.b)("h4",{id:"example-9"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > confluxWeb.cfx.accounts.wallet.add(\'0xa816a06117e572ca7ae2f786a046d2bc478051d0717bf5cc4f5397923258d393\'); // KEY\n > const contract = new confluxWeb.cfx.Contract(\n [\n {\n        "constant": true,\n        "inputs": [],\n        "name": "count",\n        "outputs": [\n          {\n            "internalType": "uint256",\n            "name": "",\n            "type": "uint256"\n          }\n        ],\n        "payable": false,\n        "stateMutability": "view",\n        "type": "function"\n      },\n {\n        "constant": false,\n        "inputs": [\n          {\n            "internalType": "uint256",\n            "name": "num",\n            "type": "uint256"\n          }\n        ],\n        "name": "inc",\n        "outputs": [\n          {\n            "internalType": "uint256",\n            "name": "",\n            "type": "uint256"\n          }\n        ],\n        "payable": false,\n        "stateMutability": "nonpayable",\n        "type": "function"\n       },\n {\n        "inputs": [\n          {\n            "internalType": "uint256",\n            "name": "num",\n            "type": "uint256"\n          }\n        ],\n        "payable": false,\n        "stateMutability": "nonpayable",\n        "type": "constructor"\n      }\n ],\n );\n')),Object(c.b)("h3",{id:"confluxwebcfxcontractdeploy"},"ConfluxWeb.cfx.Contract.deploy"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function deploy(options)")),Object(c.b)("h4",{id:"parameters-2"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"object"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.data"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"contract data")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.arguments"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"array"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"contract constructor parameters")))),Object(c.b)("h4",{id:"return-2"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Object")," "),Object(c.b)("h4",{id:"example-10"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > await contract.deploy({arguments: [254]}).send({\n    from: '0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b',\n    gas: 100000000,\n    gasPrice: 819\n }); // deploy contract by `send`\n \"0x6d1b5d68540faac893e5d5dcfed7fc253a2fd6936634f917c82856a0b19c3838\"\n\n > await confluxWeb.cfx.getTransactionReceipt('0xd1d5b66b0d3d215f042f3e4907a3bf0acf5984972527fbca45eb67286835260d');\n {\n   status: true,\n   contractCreated: '0x079352147ce2de227af6fa963f603a35aed8e601',\n   ...\n }\n\n > contract.address = '0x079352147ce2de227af6fa963f603a35aed8e601'; // after deploy, you should add address to contract\n")),Object(c.b)("h3",{id:"confluxwebcfxcontractclone"},"ConfluxWeb.cfx.Contract.clone"),Object(c.b)("p",null,"Clones the current contract instance."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function clone()")),Object(c.b)("h4",{id:"parameters-3"},"Parameters"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"void")),Object(c.b)("h4",{id:"return-3"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Object")," The new contract instance."),Object(c.b)("h4",{id:"example-11"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > const clone = contract.clone()\n > contract.defaultGas === clone.defaultGas;\n true\n\n > contract.defaultGasPrice === clone.defaultGasPrice;\n true\n\n > contract.address === clone.address; // only address difference, and clone one address to be undefined\n false\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"confluxwebcfx"},"ConfluxWeb.cfx"),Object(c.b)("h3",{id:"confluxwebcfxdefaultaccount"},"ConfluxWeb.cfx.defaultAccount"),Object(c.b)("p",null,'This default address is used as the default "from" property.'),Object(c.b)("p",null,"20 Bytes: Any Conflux address. You should have the private key for that address in your node or keystore."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string|undefined")),Object(c.b)("h4",{id:"example-12"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.cfx.defaultAccount\n undefined\n\n > confluxWeb.cfx.defaultAccount = '0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b';\n > confluxWeb.cfx.defaultAccount\n \"0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b\"\n")),Object(c.b)("h3",{id:"confluxwebcfxdefaultepoch"},"ConfluxWeb.cfx.defaultEpoch"),Object(c.b)("p",null,"When requests are made that act on the state of conflux,\nthe default epoch parameter determines the height of the epoch."),Object(c.b)("p",null,"The following options are possible for the default epoch parameter:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number"),": An integer epoch number."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},'"earliest"'),": The earliest epoch where the genesis block in."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},'"latest_state"'),": The latest epoch where the latest block with an executed state in. (default)"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},'"latest_mined"'),": The latest epoch where the latest mined block in.")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"number|string")),Object(c.b)("h4",{id:"example-13"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > confluxWeb.cfx.defaultEpoch; // Default is "latest_state"\n "latest_state"\n')),Object(c.b)("h3",{id:"confluxwebcfxcurrentprovider"},"ConfluxWeb.cfx.currentProvider"),Object(c.b)("p",null,"Will return the current provider, otherwise null"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"object|null")),Object(c.b)("h4",{id:"example-14"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.cfx.currentProvider\n HttpProvider {\n  host: 'http://testnet-jsonrpc.conflux-chain.org:12537',\n  ...\n }\n")),Object(c.b)("h3",{id:"confluxwebcfxsetprovider"},"ConfluxWeb.cfx.setProvider"),Object(c.b)("p",null,"Will change the provider for its module."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function setProvider(cfxProvider)")),Object(c.b)("h4",{id:"parameters-4"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cfxProvider"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"object"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A valid provider.")))),Object(c.b)("h4",{id:"return-4"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"boolean")," "),Object(c.b)("h4",{id:"example-15"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > confluxWeb.currentProvider.host\n "http://testnet-jsonrpc.conflux-chain.org:12537"\n > confluxWeb.cfx.currentProvider.host\n "http://testnet-jsonrpc.conflux-chain.org:12537"\n > confluxWeb.cfx.setProvider(\'http://localhost:12537\') // change module provider\n > confluxWeb.currentProvider.host\n "http://testnet-jsonrpc.conflux-chain.org:12537"\n > confluxWeb.cfx.currentProvider.host\n "http://localhost:12537"\n')),Object(c.b)("h3",{id:"confluxwebcfxgetgasprice"},"ConfluxWeb.cfx.getGasPrice"),Object(c.b)("p",null,"Returns the current gas price oracle.\nThe gas price is determined by the last few blocks median gas price."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function getGasPrice()")),Object(c.b)("h4",{id:"parameters-5"},"Parameters"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"void")),Object(c.b)("h4",{id:"return-5"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<string>")," Number string of the current gas price in drip."),Object(c.b)("h4",{id:"example-16"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > await confluxWeb.cfx.getGasPrice()\n "0"\n')),Object(c.b)("h3",{id:"confluxwebcfxgetepochnumber"},"ConfluxWeb.cfx.getEpochNumber"),Object(c.b)("p",null,"Returns the current epoch number the client is on."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function getEpochNumber()")),Object(c.b)("h4",{id:"parameters-6"},"Parameters"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"void")),Object(c.b)("h4",{id:"return-6"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<number>")," "),Object(c.b)("h3",{id:"example-17"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > await confluxWeb.cfx.getEpochNumber();\n 990902\n")),Object(c.b)("h3",{id:"confluxwebcfxgetbalance"},"ConfluxWeb.cfx.getBalance"),Object(c.b)("p",null,"Get the balance of an address at a given epoch."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function getBalance(address,defaultEpoch)")),Object(c.b)("h4",{id:"parameters-7"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The address to get the balance of.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"defaultEpoch"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number","|","string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"confluxWeb.cfx.defaultEpoch")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If you pass this parameter it will not use the default epoch.")))),Object(c.b)("h4",{id:"return-7"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<string>")," The current balance for the given address in drip."),Object(c.b)("h4",{id:"example-18"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > await confluxWeb.cfx.getBalance("0x407d73d8a49eeb85d32cf465507dd71d507100c1");\n "685539999999937000"\n\n > await confluxWeb.cfx.getBalance("0x407d73d8a49eeb85d32cf465507dd71d507100c1", "earliest");\n "0"\n')),Object(c.b)("h3",{id:"confluxwebcfxgetcode"},"ConfluxWeb.cfx.getCode"),Object(c.b)("p",null,"Get the code at a specific address."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function getCode(address,defaultEpoch)")),Object(c.b)("h4",{id:"parameters-8"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The address to get the code from.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"defaultEpoch"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number","|","string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"confluxWeb.cfx.defaultEpoch")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If you pass this parameter it will not use the default epoch.")))),Object(c.b)("h4",{id:"return-8"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<string>")," The data at given address"),Object(c.b)("h4",{id:"example-19"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > await confluxWeb.cfx.getCode("0x079352147ce2de227af6fa963f603a35aed8e601");\n "0x6080604052348015600f57600080fd5b506004361060325760003560e01c806306661abd146037578063812600df146053575b600080fd5b603d6092565b6040518082815260200191505060405180910390f35b607c60048036036020811015606757600080fd5b81019080803590602001909291905050506098565b6040518082815260200191505060405180910390f35b60005481565b60008160008082825401925050819055905091905056fea265627a7a723158203aa4346abf52089d9be8806b8bf35dff408bd9f68f668e528bc8e2e20d74b29064736f6c634300050b0032"\n')),Object(c.b)("h3",{id:"confluxwebcfxgetblock"},"ConfluxWeb.cfx.getBlock"),Object(c.b)("p",null,"Returns a block matching the block number or block hash."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function getBlock(blockHashOrEpochNumber,returnTransactionObjects)")),Object(c.b)("h4",{id:"parameters-9"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"blockHashOrEpochNumber"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string","|","number"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The block hash or epoch.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"returnTransactionObjects"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"boolean"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If true, the returned block will contain all transactions as objects, if false it will only contains the transaction hashes.")))),Object(c.b)("h4",{id:"return-9"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<object>")," The block object"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," miner: The address of the beneficiary to whom the mining rewards were given."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string|null")," hash: Hash of the block. ",Object(c.b)("inlineCode",{parentName:"li"},"null")," when its pending block."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," parentHash: Hash of the parent block."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string[]")," refereeHashes: Array of referee hashes."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number|null")," epochNumber: The current block epoch number in the client's view. ",Object(c.b)("inlineCode",{parentName:"li"},"null")," when it's not in best block's past set."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"boolean")," stable: If the block stable or not"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," nonce: Hash of the generated proof-of-work. ",Object(c.b)("inlineCode",{parentName:"li"},"null")," when its pending block."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number")," gasLimit: The maximum gas allowed in this block."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," difficulty: Integer string of the difficulty for this block."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number")," height: The block heights. ",Object(c.b)("inlineCode",{parentName:"li"},"null")," when its pending block."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number")," size: Integer the size of this block in bytes."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number")," blame: 0 if there's nothing to blame; k if the block is blaming on the state info of its k-th ancestor."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"boolean")," adaptive: If the block's weight adaptive or not."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number")," timestamp: The unix timestamp for when the block was collated."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," transactionsRoot: The hash of the transactions of the block."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string[]")," transactions: Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," deferredLogsBloomHash: The hash of the deferred block's log bloom filter"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," deferredReceiptsRoot: The hash of the receipts of the block after deferred execution."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," deferredStateRoot: The root of the final state trie of the block after deferred execution."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"object")," deferredStateRootWithAux: Information of deferred state root")),Object(c.b)("h4",{id:"example-20"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > await confluxWeb.cfx.getBlock("0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a");\n {\n  "miner": "0x0000000000000000000000000000000000000015",\n  "hash": "0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a",\n  "parentHash": "0xa378c9e283c08eac0e2ac51a8c19e61717af812a157eb914d35b171ed20920b9",\n  "refereeHashes": [],\n  "epochNumber": 925836,\n  "stable": true,\n  "nonce": "0xaaa4a571ad424ec",\n  "gasLimit": 3000000000,\n  "difficulty": "21351313",\n  "height": 925836,\n  "size": 384,\n  "blame": 0,\n  "adaptive": false,\n  "timestamp": 1570608173,\n  "transactionsRoot": "0xbe7a9e531d55ed950a217272afa035f57f6c512ca249bae19e214cf2b470562e"\n  "transactions": [\n    "0x3910617de2a689f79bccd3d36866f4afd9ca93732c8e7be280a84190db701190"\n  ],\n  "deferredLogsBloomHash": "0xd397b3b043d87fcd6fad1291ff0bfd16401c274896d8c63a923727f077b8e0b5",\n  "deferredReceiptsRoot": "0x522717233b96e0a03d85f02f8127aa0e23ef2e0865c95bb7ac577ee3754875e4",\n  "deferredStateRoot": "0xc4ec82320df3b5ce48e22d33cc82f665a274dc920796a3e206be44682b7812a2",\n  "deferredStateRootWithAux": {\n    "auxInfo": {\n      "intermediateDeltaEpochId": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",\n      "previousSnapshotRoot": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"\n    },\n    "stateRoot": {\n      "deltaRoot": "0xbc71c52f0dae840fd8815de081a2774927077714a5fe7c342b0e5e81f7bcd38e",\n      "intermediateDeltaRoot": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",\n      "snapshotRoot": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"\n    }\n  },\n}\n')),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > await confluxWeb.cfx.getBlock("0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a", true);\n {\n  "adaptive": false,\n  "blame": 0,\n  "deferredLogsBloomHash": "0xd397b3b043d87fcd6fad1291ff0bfd16401c274896d8c63a923727f077b8e0b5",\n  "deferredReceiptsRoot": "0x522717233b96e0a03d85f02f8127aa0e23ef2e0865c95bb7ac577ee3754875e4",\n  "deferredStateRoot": "0xc4ec82320df3b5ce48e22d33cc82f665a274dc920796a3e206be44682b7812a2",\n  "deferredStateRootWithAux": {\n    "auxInfo": {\n      "intermediateDeltaEpochId": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",\n      "previousSnapshotRoot": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"\n    },\n    "stateRoot": {\n      "deltaRoot": "0xbc71c52f0dae840fd8815de081a2774927077714a5fe7c342b0e5e81f7bcd38e",\n      "intermediateDeltaRoot": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",\n      "snapshotRoot": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"\n    }\n  },\n  "difficulty": "21351313",\n  "epochNumber": 925836,\n  "gasLimit": 3000000000,\n  "hash": "0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a",\n  "height": 925836,\n  "miner": "0x0000000000000000000000000000000000000015",\n  "nonce": "0xaaa4a571ad424ec",\n  "parentHash": "0xa378c9e283c08eac0e2ac51a8c19e61717af812a157eb914d35b171ed20920b9",\n  "refereeHashes": [],\n  "size": 384,\n  "stable": true,\n  "timestamp": 1570608173,\n  "transactions": [\n    {\n      "blockHash": "0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a",\n      "contractCreated": null,\n      "data": "0x",\n      "from": "0xA70ddf9B9750c575Db453Eea6A041f4C8536785A",\n      "gas": 21000,\n      "gasPrice": "819",\n      "hash": "0x3910617de2a689f79bccd3d36866f4afd9ca93732c8e7be280a84190db701190",\n      "nonce": 921,\n      "r": "0x985743d5d627e8f93e243bfd71e401f7bf5c7b098afeb910952df789312cc7b1",\n      "s": "0xaaf07bc11d56516f90697fb0f1b8140ec9b252c66e8f3172799e2829d457775",\n      "status": "0x0",\n      "to": "0xbbd9E9bE525AB967e633BcDAEaC8bD5723ED4D6B",\n      "transactionIndex": 0,\n      "v": 1,\n      "value": "1000000000000000000"\n    }\n  ],\n  "transactionsRoot": "0xbe7a9e531d55ed950a217272afa035f57f6c512ca249bae19e214cf2b470562e"\n}\n')),Object(c.b)("h3",{id:"confluxwebcfxgettransaction"},"ConfluxWeb.cfx.getTransaction"),Object(c.b)("p",null,"Returns a transaction matching the given transaction hash."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function getTransaction(transactionHash)")),Object(c.b)("h4",{id:"parameters-10"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"transactionHash"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The transaction hash.")))),Object(c.b)("h4",{id:"return-10"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<object>")," The transaction object"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," blockHash: Hash of the block where this transaction was in and got executed. ",Object(c.b)("inlineCode",{parentName:"li"},"null")," when its pending."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number")," transactionIndex: Integer of the transactions index position in the block."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," hash: Hash of the transaction."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number")," nonce: The number of transactions made by the sender prior to this one."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," from: Address of the sender."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," to: Address of the receiver. null when its a contract creation transaction."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," value: Value transferred in Drip."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," data: The data send along with the transaction."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number")," gas: Gas provided by the sender."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number")," gasPrice: Gas price provided by the sender in Drip."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," status: '0x0' successful execution; '0x1' exception happened but nonce still increased; '0x2' exception happened and nonce didn't increase."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string|null")," contractCreated: The contract address created, if the transaction was a contract creation, otherwise null."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," r: ECDSA signature r"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," s: ECDSA signature s"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," v: ECDSA recovery id")),Object(c.b)("h4",{id:"example-21"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > await confluxWeb.cfx.getTransaction("0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a");\n {\n  "blockHash": "0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a",\n  "transactionIndex": 0,\n  "hash": "0x3910617de2a689f79bccd3d36866f4afd9ca93732c8e7be280a84190db701190",\n  "nonce": 921,\n  "from": "0xA70ddf9B9750c575Db453Eea6A041f4C8536785A",\n  "to": "0xbbd9E9bE525AB967e633BcDAEaC8bD5723ED4D6B",\n  "value": "1000000000000000000"\n  "data": "0x",\n  "gas": 21000,\n  "gasPrice": "819",\n  "status": "0x0",\n  "contractCreated": null,\n  "r": "0x985743d5d627e8f93e243bfd71e401f7bf5c7b098afeb910952df789312cc7b1",\n  "s": "0xaaf07bc11d56516f90697fb0f1b8140ec9b252c66e8f3172799e2829d457775",\n  "v": 1,\n}\n')),Object(c.b)("h3",{id:"confluxwebcfxgettransactioncount"},"ConfluxWeb.cfx.getTransactionCount"),Object(c.b)("p",null,"Get the numbers of transactions sent from this address."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function getTransactionCount(address,defaultEpoch)")),Object(c.b)("h4",{id:"parameters-11"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The address to get the numbers of transactions from.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"defaultEpoch"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number","|","string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"confluxWeb.cfx.defaultEpoch")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If you pass this parameter it will not use the default epoch.")))),Object(c.b)("h4",{id:"return-11"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<number>")," The number of transactions sent from the given address."),Object(c.b)("h4",{id:"example-22"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > await confluxWeb.cfx.getTransactionCount("0xa70ddf9b9750c575db453eea6a041f4c8536785a");\n 974\n\n > await confluxWeb.cfx.getTransactionCount("0xa70ddf9b9750c575db453eea6a041f4c8536785a", \'earliest\');\n 0\n')),Object(c.b)("h3",{id:"confluxwebcfxsendsignedtransaction"},"ConfluxWeb.cfx.sendSignedTransaction"),Object(c.b)("p",null,"Sends an already signed transaction, generated for example using confluxWeb.cfx.accounts.signTransaction"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function sendSignedTransaction(signedTransactionData)")),Object(c.b)("h4",{id:"parameters-12"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"signedTransactionData"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Signed transaction data in HEX format")))),Object(c.b)("h4",{id:"return-12"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<string>")," Transaction hash"),Object(c.b)("h4",{id:"example-23"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > const ConfluxTx = require('confluxjs-transaction');\n > const tx = new ConfluxTx({\n    nonce: '0x03',\n    gasPrice: '0x01',\n    gasLimit: '0x5208', // 21000\n    to: '0x1ead8630345121d19ee3604128e5dc54b36e8ea6', // ADDRESS_TO\n    value: '0x01',\n  });\n > tx.sign(Buffer.from('a816a06117e572ca7ae2f786a046d2bc478051d0717bf5cc4f5397923258d393', 'hex')); // KEY_FROM\n > await confluxWeb.cfx.sendSignedTransaction('0x' + tx.serialize().toString('hex'));\n 0x200b930e95b3c8c54978499c6407ef71fc96a83eced88640fae59b75e1d16ef4\n")),Object(c.b)("h3",{id:"confluxwebcfxsigntransaction"},"ConfluxWeb.cfx.signTransaction"),Object(c.b)("p",null,"Signs a transaction. This account needs to be unlocked."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function signTransaction(rawTx)")),Object(c.b)("h4",{id:"parameters-13"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"rawTx"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"object"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"rawTx.from"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An address or index of a local wallet in confluxWeb.cfx.accounts.wallet.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"rawTx.to"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The destination address of the message, left undefined for a contract-creation transaction.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"rawTx.value"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number","|","string","|","BN","|","BigNumber"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value transferred for the transaction in drip, also the endowment if it\u2019s a contract-creation transaction.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"rawTx.gas"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"To-Be-Determined")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The amount of gas to use for the transaction (unused gas is refunded).")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"rawTx.gasPrice"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number","|","string","|","BN","|","BigNumber"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"confluxWeb.cfx.gasPrice")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The price of gas for this transaction in drip.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"rawTx.data"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Either a ABI byte string containing the data of the function call on a contract, or in the case of a contract-creation transaction the initialisation code.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"rawTx.nonce"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce.")))),Object(c.b)("h4",{id:"return-13"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<object>")," The RLP encoded transaction. The raw property can be used to send the transaction using confluxWeb.cfx.sendSignedTransaction."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," rawTransaction: Raw transaction string"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," messageHash: Hash of transaction for calculating signature"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," r: ECDSA signature r"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," s: ECDSA signature s"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," v: ECDSA recovery id")),Object(c.b)("h4",{id:"example-24"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > confluxWeb.cfx.accounts.wallet.add(\'a816a06117e572ca7ae2f786a046d2bc478051d0717bf5cc4f5397923258d393\'); // KEY_FROM\n > await confluxWeb.cfx.signTransaction({\n    from: 0, // index\n    nonce: 0, // make nonce appropriate\n    gasPrice: 10,\n    gas: 21000,\n    value: new BN(\'300000000000000000\'), // 300000000000000000 drip === 0.3 cfx token\n    to: \'0x1ead8630345121d19ee3604128e5dc54b36e8ea6\', // ADDRESS_TO\n    data: \'\',\n  });\n\n {\n  "messageHash": "53aec3cdccb8ab438303ece4559fc4464a118416828d8c7c0427f5debcd8feae",\n  "r": "0x1feaa7a3d6ae22c013b0987e8fa8e39ff1df1e6080c95d7d5e085e2cd9b02ff2",\n  "s": "0x0451df58547f0e0ad36d06058cd0c8cfa4eb201b4d09255f56ba0d750e520a67",\n  "v": "0x01",\n  "rawTransaction": "0xf867800a825208941ead8630345121d19ee3604128e5dc54b36e8ea6880429d069189e00008001a01feaa7a3d6ae22c013b0987e8fa8e39ff1df1e6080c95d7d5e085e2cd9b02ff2a00451df58547f0e0ad36d06058cd0c8cfa4eb201b4d09255f56ba0d750e520a67"\n }\n')),Object(c.b)("h3",{id:"confluxwebcfxcall"},"ConfluxWeb.cfx.call"),Object(c.b)("p",null,"Executes a message call transaction, which is directly executed in the VM of the node, but never mined into the blockchain."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function call(callObject,defaultEpoch)")),Object(c.b)("h4",{id:"parameters-14"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"callObject"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"object"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A transaction object, with the difference that for calls the from property is optional as well.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"defaultEpoch"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string","|","number"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"conflux.cfx.defaultEpoch"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(c.b)("h4",{id:"return-14"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<string>")," The returned data of the call, e.g. A smart contract functions return value."),Object(c.b)("h4",{id:"example-25"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > await confluxWeb.cfx.call({\n    to: "0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae", // contract address\n    data: "0xc6888fa10000000000000000000000000000000000000000000000000000000000000003"\n  })\n 0x000000000000000000000000000000000000000000000000000000000000000a\n')),Object(c.b)("h3",{id:"confluxwebcfxestimategas"},"ConfluxWeb.cfx.estimateGas"),Object(c.b)("p",null,"Executes a message call or transaction and returns the amount of the gas used."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function estimateGas(callObject)")),Object(c.b)("h4",{id:"parameters-15"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"callObject"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"object"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A transaction object, with the difference that for calls the from property is optional as well.")))),Object(c.b)("h4",{id:"return-15"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<number>")," - the used gas for the simulated call/transaction."),Object(c.b)("h4",{id:"example-26"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > await confluxWeb.cfx.estimateGas({\n    to: "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe",\n    data: "0xc6888fa10000000000000000000000000000000000000000000000000000000000000003"\n  })\n 0x0000000000000000000000000000000000000000000000000000000000000015\n')),Object(c.b)("h3",{id:"confluxwebcfxgettransactionreceipt"},"ConfluxWeb.cfx.getTransactionReceipt"),Object(c.b)("p",null,"Returns the receipt of a transaction by transaction hash."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: The receipt is not available for pending transactions and returns null.")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function getTransactionReceipt(txHash)")),Object(c.b)("h4",{id:"parameters-16"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"txHash"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The transaction hash.")))),Object(c.b)("h4",{id:"return-16"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<object>")," A transaction receipt object, or null when no receipt was found."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"boolean")," status: ",Object(c.b)("inlineCode",{parentName:"li"},"true")," if the transaction was successful; ",Object(c.b)("inlineCode",{parentName:"li"},"false"),", if the EVM reverted the transaction."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number")," outcomeStatus: 1 status ",Object(c.b)("inlineCode",{parentName:"li"},"true"),"; 0 status ",Object(c.b)("inlineCode",{parentName:"li"},"false"),"."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," stateRoot: The state root of transaction execution."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number")," epochNumber: Epoch number where this transaction was in."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," blockHash: Hash of the block where this transaction was in."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," transactionHash: Hash of the transaction."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number")," index: Integer of the transactions index position in the block."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," from: Address of the sender."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," to: Address of the receiver. null when its a contract creation transaction."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string|null")," contractCreated: The contract address created, if the transaction was a contract creation, otherwise null."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"number")," gasUsed: The amount of gas used by this specific transaction alone."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"[object]")," logs: Array of log objects, which this transaction generated."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"[string]")," logs[].address: The address of the contract executing at the point of the ",Object(c.b)("inlineCode",{parentName:"li"},"LOG")," operation."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"[string]")," logs[].topics: The topics associated with the ",Object(c.b)("inlineCode",{parentName:"li"},"LOG")," operation."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"[string]")," logs[].data: The data associated with the ",Object(c.b)("inlineCode",{parentName:"li"},"LOG")," operation."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"string")," logsBloom:")),Object(c.b)("h4",{id:"example-27"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > await confluxWeb.cfx.getTransactionReceipt('0x689258ba9fe2c25bcdc43ebb5c9018d1b56d25b1c87de1b371a19f5548c16dc1');\n {\n  status: true,\n  outcomeStatus: 0,\n  stateRoot: '0x75df853d267b40a98f6fe1103a510822bc1582894e8a9e95eb9ff0697545e4d2',\n  epochNumber: 1017673,\n  blockHash: '0xdefb3add0256b12c80f6e4fddde81da9c93ec88861cbee14051379f79624f911',\n  transactionHash: '0x689258ba9fe2c25bcdc43ebb5c9018d1b56d25b1c87de1b371a19f5548c16dc1',\n  index: 0,\n  from: '0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b',\n  to: '0x1ead8630345121d19ee3604128e5dc54b36e8ea6',\n  contractCreated: null,\n  gasUsed: 21000,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n }\n")),Object(c.b)("h3",{id:"confluxwebcfxgetpastlogs"},"ConfluxWeb.cfx.getPastLogs"),Object(c.b)("p",null,"Gets past logs, matching the given options."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function getPastLogs(options)")),Object(c.b)("h4",{id:"parameters-17"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"object"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.fromEpoch"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The number of the earliest block")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.toEpoch"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The number of the latest block")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.address"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string","|","Array","[string]"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An address or a list of addresses to only get logs from particular account(s).")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.topics"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"array"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array of values which must each appear in the log entries. The order is important, if you want to leave topics out use null, e.g. ","[null, '0x12...']",". You can also pass an array for each topic with options for that topic e.g. [null, ","['option1', 'option2']","]")))),Object(c.b)("h4",{id:"return-17"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<Array.<object>>")," Array of log objects."),Object(c.b)("h4",{id:"example-28"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > await confluxWeb.cfx.getPastLogs({\n    fromEpoch: \'0x0\',\n    toEpoch: \'latest_mined\',\n    address: \'0x169a10a431130B2F4853294A4a966803668af385\'\n  });\n\n [\n   {\n      "address": "0x169a10a431130B2F4853294A4a966803668af385",\n      "blockHash": "0x9f18cbbbc432d678b94ee6446e9305abf8f02deb0b03877cc0c71c0a71c08faf",\n      "epochNumber": "0x0",\n      "data": "0x",\n      "logIndex": 0,\n      "removed": false,\n      "topics": [\n        "0x44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e339",\n        "0x000000000000000000000000c24a31039a4dfc9ee9039bd9241a0c7848b92ae1"\n      ],\n      "transactionHash": "0xb777fc8ee9c5b5f6eb2b1c7d73106f07eb1692b9db08d9f65affafb82641559f",\n      "transactionIndex": 0,\n      "transactionLogIndex": "0x0",\n      "type": "mined",\n      "id": "log_0x5157483fef4019b6a231963496322bbf123b2559f73eef47f60dd5d1b1364fe4"\n    },\n   ...\n ]\n')),Object(c.b)("hr",null),Object(c.b)("h2",{id:"confluxwebcfxaccount"},"ConfluxWeb.cfx.account"),Object(c.b)("h3",{id:"confluxwebcfxaccountcreate"},"ConfluxWeb.cfx.account.create"),Object(c.b)("p",null,"Generates an account object with private key and public key."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: compare to eth latest, we don\u2019t have sign methods in the return account object")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function create(entropy)")),Object(c.b)("h4",{id:"parameters-18"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"entropy"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A random string to increase entropy. If given it should be at least 32 characters. If none is given a random string will be generated using randomHex.")))),Object(c.b)("h4",{id:"return-18"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"object")," The account object."),Object(c.b)("h4",{id:"example-29"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.cfx.accounts.create();\n Account {\n  address: '0xbaE14daA250D6BCE69E695217AE8B3ce1dfF7AAe',\n  privateKey:\n   '0xed66cd654e2d714445dd159801f7e8144d227715c1eb33865d44c056d8e23399',\n  ...\n }\n")),Object(c.b)("h3",{id:"confluxwebcfxaccountprivatekeytoaccount"},"ConfluxWeb.cfx.account.privateKeyToAccount"),Object(c.b)("p",null,"Creates an account object from a private key."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: compare to eth latest, we don\u2019t have sign methods in the return account object")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function privateKeyToAccount(privateKey)")),Object(c.b)("h4",{id:"parameters-19"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"privateKey"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The private key to convert.")))),Object(c.b)("h4",{id:"return-19"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"object")," The account object."),Object(c.b)("h4",{id:"example-30"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.cfx.accounts.privateKeyToAccount('0xed66cd654e2d714445dd159801f7e8144d227715c1eb33865d44c056d8e23399');\n Account {\n  address: '0xbaE14daA250D6BCE69E695217AE8B3ce1dfF7AAe',\n  privateKey:\n   '0xed66cd654e2d714445dd159801f7e8144d227715c1eb33865d44c056d8e23399',\n  ...\n }\n")),Object(c.b)("h3",{id:"confluxwebcfxaccountrecovertransaction"},"ConfluxWeb.cfx.account.recoverTransaction"),Object(c.b)("p",null,"Recovers the Conflux address which was used to sign the given RLP encoded transaction."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function recoverTransaction(rawTransaction)")),Object(c.b)("h4",{id:"parameters-20"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"rawTransaction"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The RLP encoded transaction.")))),Object(c.b)("h4",{id:"return-20"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The Conflux address used to sign this transaction."),Object(c.b)("h4",{id:"example-31"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.cfx.accounts.recoverTransaction('0xf867800a825208941ead8630345121d19ee3604128e5dc54b36e8ea6880429d069189e00008001a01feaa7a3d6ae22c013b0987e8fa8e39ff1df1e6080c95d7d5e085e2cd9b02ff2a00451df58547f0e0ad36d06058cd0c8cfa4eb201b4d09255f56ba0d750e520a67');\n \"0xbbd9E9bE525AB967e633BcDAEaC8bD5723ED4D6B\"\n")),Object(c.b)("h3",{id:"confluxwebcfxaccounthashmessage"},"ConfluxWeb.cfx.account.hashMessage"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function hashMessage(message)")),Object(c.b)("h4",{id:"parameters-21"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"message"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A message to hash, if its HEX it will be UTF8 decoded before.")))),Object(c.b)("h4",{id:"return-21"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The hashed message"),Object(c.b)("h4",{id:"example-32"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > confluxWeb.cfx.accounts.hashMessage("Hello World");\n "0xa1de988600a42c4b4ab089b619297c17d53cffae5d5120d82d8a92d0bb3b78f2"\n\n > confluxWeb.cfx.accounts.hashMessage(confluxWeb.cfx.utf8ToHex("Hello World")); // the below results in the same hash\n "0xa1de988600a42c4b4ab089b619297c17d53cffae5d5120d82d8a92d0bb3b78f2"\n')),Object(c.b)("h3",{id:"confluxwebcfxaccountsign"},"ConfluxWeb.cfx.account.sign"),Object(c.b)("p",null,"Signs arbitrary data. This data is before UTF-8 HEX decoded and enveloped as follows:\n",Object(c.b)("inlineCode",{parentName:"p"},'"\\x19Ethereum Signed Message:\\n" + message.length + message')),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function sign(data,privateKey)")),Object(c.b)("h4",{id:"parameters-22"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"data"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The data to sign.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"privateKey"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The private key to sign with.")))),Object(c.b)("h4",{id:"return-22"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"object")," "),Object(c.b)("h4",{id:"example-33"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > confluxWeb.cfx.accounts.sign(\'Hello World\', \'a816a06117e572ca7ae2f786a046d2bc478051d0717bf5cc4f5397923258d393\');\n {\n  "message": "Hello World",\n  "messageHash": "0xa1de988600a42c4b4ab089b619297c17d53cffae5d5120d82d8a92d0bb3b78f2",\n  "v": "0x1b",\n  "r": "0x14e05a1ff41165dc420414e96acd7710a49ff05eecbd2caf520ac8d2e37426b0",\n  "s": "0x4236443a89cd5a5d14559bc5c115988b704d40dea7e39ed087ae80cd7822f99c",\n  "signature": "0x14e05a1ff41165dc420414e96acd7710a49ff05eecbd2caf520ac8d2e37426b04236443a89cd5a5d14559bc5c115988b704d40dea7e39ed087ae80cd7822f99c1b"\n }\n')),Object(c.b)("h3",{id:"confluxwebcfxaccountrecover"},"ConfluxWeb.cfx.account.recover"),Object(c.b)("p",null,"Recovers the Conflux address which was used to sign the given data."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"confluxWeb.cfx.accounts.recover(message, signature ","[, preFixed]",");")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"confluxWeb.cfx.accounts.recover(message, v, r, s ","[, preFixed]",");")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"confluxWeb.cfx.accounts.recover(signatureObject);")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function recover(message,signature,r,s,v,preFixed,signatureObject)")),Object(c.b)("h4",{id:"parameters-23"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"message"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"signature"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The raw RLP encoded signature, OR parameter 2-4 as v, r, s values.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"r"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"First 32 bytes of the signature")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"s"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Next 32 bytes of the signature")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"v"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Recovery value")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"preFixed"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"boolean"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'If the last parameter is true, the given message will NOT automatically be prefixed with "\\x19Ethereum Signed Message:\\n" + message.length + message, and assumed to be already prefixed.')),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"signatureObject"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"object"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"signatureObject.messageHash"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'The hash of the given message already prefixed with "\\x19Ethereum Signed Message:\\n" + message.length + message.')),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"signatureObject.r"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"same as ",Object(c.b)("inlineCode",{parentName:"td"},"r"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"signatureObject.s"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"same as ",Object(c.b)("inlineCode",{parentName:"td"},"s"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"signatureObject.v"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"same as ",Object(c.b)("inlineCode",{parentName:"td"},"v"))))),Object(c.b)("h4",{id:"return-23"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The Conflux address used to sign this data."),Object(c.b)("h4",{id:"example-34"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.cfx.accounts.recover({\n    messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',\n    v: '0x1',\n    r: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd',\n    s: '0x6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a029'\n })\n \"0x2c7536E3605D9C16a7a3D7b1898e529396a65c23\"\n\n > confluxWeb.cfx.accounts.recover('Some data', '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a02901'); // message, signature\n \"0x2c7536E3605D9C16a7a3D7b1898e529396a65c23\"\n\n > confluxWeb.cfx.accounts.recover('Some data', '0x01', '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd', '0x6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a029'); // message, v, r, s\n \"0x2c7536E3605D9C16a7a3D7b1898e529396a65c23\"\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"confluxwebcfxaccountwallet"},"ConfluxWeb.cfx.account.wallet"),Object(c.b)("h3",{id:"confluxwebcfxaccountwalletcreate"},"ConfluxWeb.cfx.account.wallet.create"),Object(c.b)("p",null,"Generates one or more accounts in the wallet. If wallets already exist they will not be overridden."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function create(numberOfAccounts,entropy)")),Object(c.b)("h4",{id:"parameters-24"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"numberOfAccounts"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of accounts to create. Leave empty to create an empty wallet.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"entropy"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A string with random characters as additional entropy when generating accounts. If given it should be at least 32 characters.")))),Object(c.b)("h4",{id:"return-24"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"object")," The wallet object"),Object(c.b)("h4",{id:"example-35"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.cfx.accounts.wallet.create(2);\n Wallet {\n   ...\n   accounts: {\n     '0':\n      Account {\n        address: '0x52B2a035bbC4263D46a327376195e86dbaAF0b42',\n        privateKey:\n         '0x9887b79bd08ac7ee5897a24c50ee366450edd706cd8cec637cbb91234638d6bb',\n        accounts: [Accounts] },\n     '1':\n      Account {\n        address: '0x52B2a035bbC4263D46a327376195e86dbaAF0b42',\n        privateKey:\n         '0x9887b79bd08ac7ee5897a24c50ee366450edd706cd8cec637cbb91234638d6bb',\n        accounts: [Accounts] },\n   },\n   ...\n }\n")),Object(c.b)("h3",{id:"confluxwebcfxaccountwalletadd"},"ConfluxWeb.cfx.account.wallet.add"),Object(c.b)("p",null,"Adds an account using a private key or account object to the wallet."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function add(account)")),Object(c.b)("h4",{id:"parameters-25"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"account"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string","|","object"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A private key or account object created with confluxWeb.cfx.accounts.create().")))),Object(c.b)("h4",{id:"return-25"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"object")," The added account"),Object(c.b)("h4",{id:"example-36"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.cfx.accounts.wallet.add('a816a06117e572ca7ae2f786a046d2bc478051d0717bf5cc4f5397923258d393');\n Account {\n  address: '0x4060E99f892E052dF9F59126D3F1eF2240A5df97',\n  privateKey:\n   'a816a06117e572ca7ae2f786a046d2bc478051d0717bf5cc4f5397923258d393',\n  ...\n }\n")),Object(c.b)("h3",{id:"confluxwebcfxaccountwalletremove"},"ConfluxWeb.cfx.account.wallet.remove"),Object(c.b)("p",null,"Removes an account from the wallet."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function remove(address)")),Object(c.b)("h4",{id:"parameters-26"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string","|","number"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The account address, or index in the wallet.")))),Object(c.b)("h4",{id:"return-26"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"boolean")," true if the wallet was removed. false if it couldn\u2019t be found."),Object(c.b)("h4",{id:"example-37"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.cfx.accounts.wallet.remove('0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b');\n true\n\n > confluxWeb.cfx.accounts.wallet.remove(0);\n true\n")),Object(c.b)("h3",{id:"confluxwebcfxaccountwalletclear"},"ConfluxWeb.cfx.account.wallet.clear"),Object(c.b)("p",null,"Securely empties the wallet and removes all its accounts."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function clear()")),Object(c.b)("h4",{id:"parameters-27"},"Parameters"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"void")),Object(c.b)("h4",{id:"return-27"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Object")," The wallet object."),Object(c.b)("h4",{id:"example-38"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.cfx.accounts.wallet.clear();\n Wallet {\n   accounts: {},\n   accountsIndex: 0\n   ...\n }\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"confluxwebcfxcontractmethods-1"},"ConfluxWeb.cfx.Contract.methods"),Object(c.b)("h3",{id:"confluxwebcfxcontractmethodsencodeabi"},"ConfluxWeb.cfx.Contract.methods.encodeABI"),Object(c.b)("p",null,"Encodes the ABI for this method.\nThis can be used to send a transaction, call a method,\nor pass it into another smart contracts method as arguments."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: contract instance create code see Contract.constructor")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function encodeABI()")),Object(c.b)("h4",{id:"parameters-28"},"Parameters"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"void")),Object(c.b)("h4",{id:"return-28"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The encoded ABI byte code to send via a transaction or call."),Object(c.b)("h4",{id:"example-39"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > await contract.methods.inc(1).encodeABI();\n "0x812600df0000000000000000000000000000000000000000000000000000000000000001"\n\n > await contract.methods.count().encodeABI();\n "0x06661abd"\n')),Object(c.b)("h3",{id:"confluxwebcfxcontractmethodsestimategas"},"ConfluxWeb.cfx.Contract.methods.estimateGas"),Object(c.b)("p",null,"Will call estimate the gas a method execution will take when executed in the EVM without sending any transaction. The estimation can differ from the actual gas used when later sending a transaction, as the state of the smart contract can be different at that time."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: contract instance create code see Contract.constructor")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function estimateGas()")),Object(c.b)("h4",{id:"parameters-29"},"Parameters"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"void")),Object(c.b)("h4",{id:"return-29"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<number>")," "),Object(c.b)("h4",{id:"example-40"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > await contract.methods.inc(1).estimateGas();\n 26928\n\n > await contract.methods.count().estimateGas();\n 21655\n")),Object(c.b)("h3",{id:"confluxwebcfxcontractmethodscall"},"ConfluxWeb.cfx.Contract.methods.call"),Object(c.b)("p",null,"Will call a \u201cconstant\u201d method and execute its smart contract method in the EVM without sending any transaction.\nNote calling can not alter the smart contract state."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: contract instance create code see Contract.constructor")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function call()")),Object(c.b)("h4",{id:"parameters-30"},"Parameters"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"void")),Object(c.b)("h4",{id:"return-30"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise")," contract method return value"),Object(c.b)("h4",{id:"example-41"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > await contract.methods.inc(1).call();\n BigNumber { _hex: '0xff' }\n\n > await contract.methods.count().call();\n BigNumber { _hex: '0xfe' }\n")),Object(c.b)("h3",{id:"confluxwebcfxcontractmethodssend"},"ConfluxWeb.cfx.Contract.methods.send"),Object(c.b)("p",null,"Will send a transaction to the smart contract and execute its method.\nNote this can alter the smart contract state."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: contract instance create code see Contract.constructor")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"async function send(options)")),Object(c.b)("h4",{id:"parameters-31"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"object"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.from"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The address the transaction should be sent from.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.gasPrice"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"contract.defaultGasPrice"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The gas price in wei to use for this transaction.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.gas"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"contract.defaultGas"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The maximum gas provided for this transaction (gas limit).")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"options.value"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number","|","string","|","BN","|","BigNumber"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value transferred for the transaction in drip.")))),Object(c.b)("h4",{id:"return-31"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Promise.<string>")," Transaction hash."),Object(c.b)("h4",{id:"example-42"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > await contract.methods.inc(1).send({\n    from: '0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b',\n    gas: 100000000,\n    gasPrice: 819\n });\n \"0xb01101228cbd8619ab1f8f017530ff945b655472be211eb828b31bc7c97b9d5c\"\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"confluxwebutils-1"},"ConfluxWeb.utils"),Object(c.b)("h3",{id:"confluxwebutilsrandomhex"},"ConfluxWeb.utils.randomHex"),Object(c.b)("p",null,"The randomHex library to generate cryptographically strong pseudo-random HEX strings from a given byte size."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function randomHex(bytesSize)")),Object(c.b)("h4",{id:"parameters-32"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytesSize"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"given byte size")))),Object(c.b)("h4",{id:"return-32"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The generated random HEX string."),Object(c.b)("h4",{id:"example-43"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.randomHex(32)\n 0xd3185018552117d2c4b5277307c455b4746267b27ea133abd288c0b136c3865c\n\n > confluxWeb.utils.randomHex(4)\n 0x472ace2a\n\n > confluxWeb.utils.randomHex(2)\n 0x52ed\n\n > confluxWeb.utils.randomHex(1)\n 0x3b\n\n > confluxWeb.utils.randomHex(0)\n 0x\n")),Object(c.b)("h3",{id:"confluxwebutilsisbn"},"ConfluxWeb.utils.isBN"),Object(c.b)("p",null,"Checks if a given value is a BN.js instance."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function isBN(bn)")),Object(c.b)("h4",{id:"parameters-33"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bn"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"BN"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An BN.js instance")))),Object(c.b)("h4",{id:"return-33"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"boolean")," "),Object(c.b)("h4",{id:"example-44"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > const bn = new BN(10)\n > confluxWeb.utils.isBN(bn)\n true\n")),Object(c.b)("h3",{id:"confluxwebutilssha3"},"ConfluxWeb.utils.sha3"),Object(c.b)("p",null,"Will calculate the sha3 of the input."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function sha3(str)")),Object(c.b)("h4",{id:"parameters-34"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A string to hash")))),Object(c.b)("h4",{id:"return-34"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," the result hash."),Object(c.b)("h4",{id:"example-45"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.sha3('234');\n \"0xc1912fee45d61c87cc5ea59dae311904cd86b84fee17cc96966216f811ce6a79\"\n\n > confluxWeb.utils.keccak256('234'); // alias\n \"0xc1912fee45d61c87cc5ea59dae311904cd86b84fee17cc96966216f811ce6a79\"\n")),Object(c.b)("h3",{id:"confluxwebutilssoliditysha3"},"ConfluxWeb.utils.soliditySha3"),Object(c.b)("p",null,"Will calculate the sha3 of given input parameters in the same way solidity would.\nThis means arguments will be ABI converted and tightly packed before being hashed."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function soliditySha3(args)")),Object(c.b)("h4",{id:"parameters-35"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"...args"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Array.<(string","|","number","|","object","|","BN)>"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(c.b)("h4",{id:"return-35"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"void")),Object(c.b)("h4",{id:"example-46"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.soliditySha3('234564535', '0xfff23243', true, -10);\n \"0x3e27a893dc40ef8a7f0841d96639de2f58a132be5ae466d40087a2cfa83b7179\"\n\n > confluxWeb.utils.soliditySha3('Hello!%'); // auto detects: string\n \"0x661136a4267dba9ccdf6bfddb7c00e714de936674c4bdb065a531cf1cb15c7fc\"\n\n > confluxWeb.utils.soliditySha3('234'); // auto detects: uint256\n \"0x61c831beab28d67d1bb40b5ae1a11e2757fa842f031a2d0bc94a7867bc5d26c2\"\n\n > confluxWeb.utils.soliditySha3(0xea); // same as above\n \"0x61c831beab28d67d1bb40b5ae1a11e2757fa842f031a2d0bc94a7867bc5d26c2\"\n\n > confluxWeb.utils.soliditySha3(new BN('234')); // same as above\n \"0x61c831beab28d67d1bb40b5ae1a11e2757fa842f031a2d0bc94a7867bc5d26c2\"\n\n > confluxWeb.utils.soliditySha3({type: 'uint256', value: '234'}); // same as above\n \"0x61c831beab28d67d1bb40b5ae1a11e2757fa842f031a2d0bc94a7867bc5d26c2\"\n\n > confluxWeb.utils.soliditySha3({t: 'uint', v: new BN('234')}); // same as above\n \"0x61c831beab28d67d1bb40b5ae1a11e2757fa842f031a2d0bc94a7867bc5d26c2\"\n\n > confluxWeb.utils.soliditySha3('0x407D73d8a49eeb85D32Cf465507dd71d507100c1');\n \"0x4e8ebbefa452077428f93c9520d3edd60594ff452a29ac7d2ccc11d47f3ab95b\"\n\n > confluxWeb.utils.soliditySha3({t: 'bytes', v: '0x407D73d8a49eeb85D32Cf465507dd71d507100c1'}); // same result as above\n \"0x4e8ebbefa452077428f93c9520d3edd60594ff452a29ac7d2ccc11d47f3ab95b\"\n\n > confluxWeb.utils.soliditySha3({t: 'address', v: '0x407D73d8a49eeb85D32Cf465507dd71d507100c1'}); // same as above, but will do a checksum check, if its multi case\n \"0x4e8ebbefa452077428f93c9520d3edd60594ff452a29ac7d2ccc11d47f3ab95b\"\n\n > confluxWeb.utils.soliditySha3({t: 'bytes32', v: '0x407D73d8a49eeb85D32Cf465507dd71d507100c1'}); // different result as above\n \"0x3c69a194aaf415ba5d6afca734660d0a3d45acdc05d54cd1ca89a8988e7625b4\"\n\n > confluxWeb.utils.soliditySha3({t: 'string', v: 'Hello!%'}, {t: 'int8', v:-23}, {t: 'address', v: '0x85F43D8a49eeB85d32Cf465507DD71d507100C1d'});\n \"0xa13b31627c1ed7aaded5aecec71baf02fe123797fffd45e662eac8e06fbe4955\"\n")),Object(c.b)("h3",{id:"confluxwebutilsishex"},"ConfluxWeb.utils.isHex"),Object(c.b)("p",null,"Checks if a given string is a HEX string."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function isHex(hex)")),Object(c.b)("h4",{id:"parameters-36"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"hex"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The given HEX string.")))),Object(c.b)("h4",{id:"return-36"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"boolean")," "),Object(c.b)("h4",{id:"example-47"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.isHex('0xc1912');\n true\n\n > confluxWeb.utils.isHex(0xc1912);\n true\n\n > confluxWeb.utils.isHex('c1912');\n true\n\n > confluxWeb.utils.isHex(345); // this is tricky, as 345 can be a a HEX representation or a number, be careful when not having a 0x in front!\n true\n\n > confluxWeb.utils.isHex('0xZ1912');\n false\n\n > confluxWeb.utils.isHex('Hello');\n false\n")),Object(c.b)("h3",{id:"confluxwebutilsishexstrict"},"ConfluxWeb.utils.isHexStrict"),Object(c.b)("p",null,"Checks if a given string is a HEX string. Difference to isHex() is that it expects HEX to be prefixed with 0x."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function isHexStrict(hex)")),Object(c.b)("h4",{id:"parameters-37"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"hex"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The given HEX string.")))),Object(c.b)("h4",{id:"return-37"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"boolean")," "),Object(c.b)("h4",{id:"example-48"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.isHexStrict('0xc1912');\n true\n\n > confluxWeb.utils.isHexStrict(0xc1912);\n false\n\n > confluxWeb.utils.isHexStrict('c1912');\n false\n\n > confluxWeb.utils.isHexStrict(345); // this is tricky, as 345 can be a a HEX representation or a number, be careful when not having a 0x in front!\n false\n\n > confluxWeb.utils.isHexStrict('0xZ1912');\n false\n\n > confluxWeb.utils.isHex('Hello');\n false\n")),Object(c.b)("h3",{id:"confluxwebutilsisaddress"},"ConfluxWeb.utils.isAddress"),Object(c.b)("p",null,"Checks if a given string is a valid Conflux address. It will also check the checksum, if the address has upper and lowercase letters."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function isAddress(address)")),Object(c.b)("h4",{id:"parameters-38"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An address string.")))),Object(c.b)("h4",{id:"return-38"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The checksum address."),Object(c.b)("h4",{id:"example-49"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.isAddress('0xc1912fee45d61c87cc5ea59dae31190fffff232d');\n true\n\n > confluxWeb.utils.isAddress('c1912fee45d61c87cc5ea59dae31190fffff232d');\n true\n\n > confluxWeb.utils.isAddress('0XC1912FEE45D61C87CC5EA59DAE31190FFFFF232D'); // as all is uppercase, no checksum will be checked\n true\n\n > confluxWeb.utils.isAddress('0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d');\n true\n\n > confluxWeb.utils.isAddress('0xC1912fEE45d61C87Cc5EA59DaE31190FFFFf232d'); // wrong checksum\n false\n")),Object(c.b)("h3",{id:"confluxwebutilstochecksumaddress"},"ConfluxWeb.utils.toChecksumAddress"),Object(c.b)("p",null,"Will convert an upper or lowercase Conflux address to a checksum address."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function toChecksumAddress(address)")),Object(c.b)("h4",{id:"parameters-39"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An address string.")))),Object(c.b)("h4",{id:"return-39"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"void")),Object(c.b)("h4",{id:"example-50"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.toChecksumAddress('0xc1912fee45d61c87cc5ea59dae31190fffff2323');\n \"0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d\"\n\n > confluxWeb.utils.toChecksumAddress('0XC1912FEE45D61C87CC5EA59DAE31190FFFFF232D'); // same as above\n \"0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d\"\n")),Object(c.b)("h3",{id:"confluxwebutilscheckaddresschecksum"},"ConfluxWeb.utils.checkAddressChecksum"),Object(c.b)("p",null,"Checks the checksum of a given address. Will also return false on non-checksum addresses."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function checkAddressChecksum(address)")),Object(c.b)("h4",{id:"parameters-40"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An address string.")))),Object(c.b)("h4",{id:"return-40"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"boolean")," true when the checksum of the address is valid, false if its not a checksum address, or the checksum is invalid."),Object(c.b)("h4",{id:"example-51"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.checkAddressChecksum('0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d');\n true\n")),Object(c.b)("h3",{id:"confluxwebutilstohex"},"ConfluxWeb.utils.toHex"),Object(c.b)("p",null,"Will auto convert any given value to HEX. Number strings will interpreted as numbers.\nText strings will be interpreted as UTF-8 strings."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function toHex(value)")),Object(c.b)("h4",{id:"parameters-41"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"value"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string","|","number","|","BN","|","BigNumber"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The input to convert to HEX.")))),Object(c.b)("h4",{id:"return-41"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The resulting HEX string."),Object(c.b)("h4",{id:"example-52"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > confluxWeb.utils.toHex(\'234\');\n "0xea"\n\n > confluxWeb.utils.toHex(234);\n "0xea"\n\n > confluxWeb.utils.toHex(new BN(\'234\'));\n "0xea"\n\n > confluxWeb.utils.toHex(new BigNumber(\'234\'));\n "0xea"\n\n > confluxWeb.utils.toHex(\'I have 100\u20ac\');\n "0x49206861766520313030e282ac"\n')),Object(c.b)("h3",{id:"confluxwebutilstobn"},"ConfluxWeb.utils.toBN"),Object(c.b)("p",null,"Will safely convert any given value (including BigNumber.js instances) into a BN.js instance, for handling big numbers in JavaScript."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: For just the BN.js class use utils.BN")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function toBN(num)")),Object(c.b)("h4",{id:"parameters-42"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"num"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number","|","string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number to convert to a big number.")))),Object(c.b)("h4",{id:"return-42"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"BN")," The BN.js instance."),Object(c.b)("h4",{id:"example-53"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.toBN(1234).toString();\n \"1234\"\n\n > confluxWeb.utils.toBN('1234').add(confluxWeb.utils.toBN('1')).toString();\n \"1235\"\n\n > confluxWeb.utils.toBN('0xea').toString();\n \"234\"\n")),Object(c.b)("h3",{id:"confluxwebutilshextonumber"},"ConfluxWeb.utils.hexToNumber"),Object(c.b)("p",null,"Returns the number representation of a given HEX value."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: This is not useful for big numbers, rather use utils.toBN instead.")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function hexToNumber(hex)")),Object(c.b)("h4",{id:"parameters-43"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"hex"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A string to hash.")))),Object(c.b)("h4",{id:"return-43"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"number")," "),Object(c.b)("h4",{id:"example-54"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.hexToNumber('0xea');\n 234\n")),Object(c.b)("h3",{id:"confluxwebutilshextonumberstring"},"ConfluxWeb.utils.hexToNumberString"),Object(c.b)("p",null,"Returns the number representation of a given HEX value as a string."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function hexToNumberString(hex)")),Object(c.b)("h4",{id:"parameters-44"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"hex"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A string to hash")))),Object(c.b)("h4",{id:"return-44"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The number as a string"),Object(c.b)("h4",{id:"example-55"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.hexToNumberString('0xea');\n \"234\"\n")),Object(c.b)("h3",{id:"confluxwebutilsnumbertohex"},"ConfluxWeb.utils.numberToHex"),Object(c.b)("p",null,"Returns the HEX representation of a given number value."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function numberToHex(num)")),Object(c.b)("h4",{id:"parameters-45"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"num"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number","|","string","|","BN","|","BigNumber"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A number as string or number.")))),Object(c.b)("h4",{id:"return-45"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The HEX value of the given number."),Object(c.b)("h4",{id:"example-56"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.numberToHex('234');\n '0xea'\n")),Object(c.b)("h3",{id:"confluxwebutilshextoutf8"},"ConfluxWeb.utils.hexToUtf8"),Object(c.b)("p",null,"Returns the UTF-8 string representation of a given HEX value."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function hexToUtf8(hex)")),Object(c.b)("h4",{id:"parameters-46"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"hex"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A HEX string to convert to a UTF-8 string.")))),Object(c.b)("h4",{id:"return-46"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The UTF-8 string."),Object(c.b)("h4",{id:"example-57"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.hexToUtf8('0x49206861766520313030e282ac');\n \"I have 100\u20ac\"\n")),Object(c.b)("h3",{id:"confluxwebutilshextoascii"},"ConfluxWeb.utils.hexToAscii"),Object(c.b)("p",null,"Returns the ASCII string representation of a given HEX value."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function hexToAscii(hex)")),Object(c.b)("h4",{id:"parameters-47"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"hex"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A HEX string to convert to a ASCII string.")))),Object(c.b)("h4",{id:"return-47"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The ASCII string."),Object(c.b)("h4",{id:"example-58"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.hexToAscii('0x4920686176652031303021');\n \"I have 100!\"\n")),Object(c.b)("h3",{id:"confluxwebutilsutf8tohex"},"ConfluxWeb.utils.utf8ToHex"),Object(c.b)("p",null,"Returns the HEX representation of a given UTF-8 string."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function utf8ToHex(str)")),Object(c.b)("h4",{id:"parameters-48"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A UTF-8 string to convert to a HEX string.")))),Object(c.b)("h4",{id:"return-48"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The HEX string"),Object(c.b)("h4",{id:"example-59"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.utf8ToHex('I have 100\u20ac');\n \"0x49206861766520313030e282ac\"\n")),Object(c.b)("h3",{id:"confluxwebutilsasciitohex"},"ConfluxWeb.utils.asciiToHex"),Object(c.b)("p",null,"Returns the HEX representation of a given ASCII string."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: it behaves differently from 1.2.1")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function asciiToHex(str)")),Object(c.b)("h4",{id:"parameters-49"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A ASCII string to convert to a HEX string.")))),Object(c.b)("h4",{id:"return-49"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The HEX string"),Object(c.b)("h4",{id:"example-60"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.asciiToHex('I have 100!');\n \"0x4920686176652031303021\"\n")),Object(c.b)("h3",{id:"confluxwebutilshextobytes"},"ConfluxWeb.utils.hexToBytes"),Object(c.b)("p",null,"Returns a byte array from the given HEX string."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: it behaves differently from 1.2.1")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function hexToBytes(hex)")),Object(c.b)("h4",{id:"parameters-50"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"hex"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A HEX to convert.")))),Object(c.b)("h4",{id:"return-50"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"array")," The byte array."),Object(c.b)("h4",{id:"example-61"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.hexToBytes('0x000000ea');\n [ 0, 0, 0, 234 ]\n\n > confluxWeb.utils.hexToBytes(0x000000ea);\n [ 234 ]\n")),Object(c.b)("h3",{id:"confluxwebutilsbytestohex"},"ConfluxWeb.utils.bytesToHex"),Object(c.b)("p",null,"Returns a HEX string from a byte array."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function bytesToHex(byteArray)")),Object(c.b)("h4",{id:"parameters-51"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"byteArray"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"array"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A byte array to convert.")))),Object(c.b)("h4",{id:"return-51"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The HEX string"),Object(c.b)("h4",{id:"example-62"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > confluxWeb.utils.bytesToHex([ 72, 101, 108, 108, 111, 33, 36 ]);\n "0x48656c6c6f2124"\n')),Object(c.b)("h3",{id:"confluxwebutilstodrip"},"ConfluxWeb.utils.toDrip"),Object(c.b)("p",null,"Converts any cfx value value into drip."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},'NOTE: "drip" are the smallest conflux unit, and you should always make calculations in drip and convert only for display reasons.')),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: can not pass a Number, only string or BN are acceptable")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function toDrip(str,unit)")),Object(c.b)("h4",{id:"parameters-52"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string","|","BN"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"unit"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'"cfx"'),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The cfx to convert from. Possible units are ","['cfx', 'gdrip', 'drip']")))),Object(c.b)("h4",{id:"return-52"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string|BN")," If a number, or string is given it returns a number string, otherwise a BN.js instance."),Object(c.b)("h4",{id:"example-63"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.toDrip('1');\n \"1000000000000000000\"\n\n > confluxWeb.utils.toDrip('1', 'cfx');\n \"1000000000000000000\"\n\n > confluxWeb.utils.toDrip('1', 'gdrip');\n \"1000000000\"\n\n > confluxWeb.utils.toDrip('1', 'drip');\n \"1\"\n")),Object(c.b)("h3",{id:"confluxwebutilsfromdrip"},"ConfluxWeb.utils.fromDrip"),Object(c.b)("p",null,"Converts any drip value into a cfx value."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},'NOTE: "drip" are the smallest conflux unit, and you should always make calculations in drip and convert only for display reasons.')),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"NOTE: can not pass a Number, only string or BN are acceptable")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function fromDrip(str,unit)")),Object(c.b)("h4",{id:"parameters-53"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string","|","BN"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value in drip")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"unit"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'"cfx"'),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The cfx to convert to. Possible units are ","['cfx', 'gdrip', 'drip']")))),Object(c.b)("h4",{id:"return-53"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string|BN")," If a number, or string is given it returns a number string, otherwise a BN.js instance."),Object(c.b)("h4",{id:"example-64"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.fromDrip('1');\n \"0.000000000000000001\"\n\n > confluxWeb.utils.fromDrip('1', 'cfx');\n \"0.000000000000000001\"\n\n > confluxWeb.utils.fromDrip('1', 'gdrip');\n \"0.000000001\"\n\n > confluxWeb.utils.fromDrip('1', 'gdrip');\n \"1\"\n")),Object(c.b)("h3",{id:"confluxwebutilspadleft"},"ConfluxWeb.utils.padLeft"),Object(c.b)("p",null,"Adds a padding on the left of a string, Useful for adding paddings to HEX strings."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function padLeft(value,characterAmount,sign)")),Object(c.b)("h4",{id:"parameters-54"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"value"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The string to add padding on the left.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"characterAmount"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The number of characters the total string should have.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sign"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'"0"'),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The character sign to use.")))),Object(c.b)("h4",{id:"return-54"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The padded string."),Object(c.b)("h4",{id:"example-65"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.padLeft('0x3456ff', 20);\n \"0x000000000000003456ff\"\n\n > confluxWeb.utils.padLeft(0x3456ff, 20);\n \"0x000000000000003456ff\"\n\n > confluxWeb.utils.padLeft('Hello', 20, 'x');\n \"xxxxxxxxxxxxxxxHello\"\n")),Object(c.b)("h3",{id:"confluxwebutilspadright"},"ConfluxWeb.utils.padRight"),Object(c.b)("p",null,"Adds a padding on the right of a string, Useful for adding paddings to HEX strings."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function padRight(value,characterAmount,sign)")),Object(c.b)("h4",{id:"parameters-55"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"value"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The string to add padding on the right.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"characterAmount"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The number of characters the total string should have.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sign"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'"0"'),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The character sign to use.")))),Object(c.b)("h4",{id:"return-55"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The padded string."),Object(c.b)("h4",{id:"example-66"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," > confluxWeb.utils.padRight('0x3456ff', 20);\n \"0x3456ff00000000000000\"\n\n > confluxWeb.utils.padRight(0x3456ff, 20);\n \"0x3456ff00000000000000\"\n\n > confluxWeb.utils.padRight('Hello', 20, 'x');\n \"Helloxxxxxxxxxxxxxxx\"\n")),Object(c.b)("h3",{id:"confluxwebutilstotwoscomplement"},"ConfluxWeb.utils.toTwosComplement"),Object(c.b)("p",null,"Converts a negative numer into a two\u2019s complement."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"function toTwosComplement(value)")),Object(c.b)("h4",{id:"parameters-56"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"value"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"number","|","string","|","BigNumber"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The number to convert.")))),Object(c.b)("h4",{id:"return-56"},"Return"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"string")," The converted hex string."),Object(c.b)("h4",{id:"example-67"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),' > confluxWeb.utils.toTwosComplement(\'-1\');\n "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"\n\n > confluxWeb.utils.toTwosComplement(-1);\n "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"\n\n > confluxWeb.utils.toTwosComplement(\'0x1\');\n "0x0000000000000000000000000000000000000000000000000000000000000001"\n\n > confluxWeb.utils.toTwosComplement(-15);\n "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1"\n\n > confluxWeb.utils.toTwosComplement(\'-0x1\');\n "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"\n')))}o.isMDXComponent=!0},211:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return p}));var n=a(0),b=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,b=function(e,t){if(null==e)return{};var a,n,b={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(b[a]=e[a]);return b}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(b[a]=e[a])}return b}var u=b.a.createContext({}),o=function(e){var t=b.a.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=o(e.components);return b.a.createElement(u.Provider,{value:t},e.children)},j={inlineCode:"code",wrapper:function(e){var t=e.children;return b.a.createElement(b.a.Fragment,{},t)}},O=b.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=o(a),O=n,p=d["".concat(l,".").concat(O)]||d[O]||j[O]||c;return a?b.a.createElement(p,r(r({ref:t},u),{},{components:a})):b.a.createElement(p,r({ref:t},u))}));function p(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,l=new Array(c);l[0]=O;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r.mdxType="string"==typeof e?e:n,l[1]=r;for(var u=2;u<c;u++)l[u]=a[u];return b.a.createElement.apply(null,l)}return b.a.createElement.apply(null,a)}O.displayName="MDXCreateElement"}}]);